;;
;; Type: StateInit
;; TLB: _ code:^cell data:^cell = StateInit
;;

((cell, cell)) $StateInit$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (cell vvv'code, cell vvv'data) = __tact_tuple_destroy_2(v);
    return (vvv'code, vvv'data);
}

;;
;; Type: SendParameters
;; TLB: _ bounce:bool to:address value:int257 mode:int257 body:Maybe ^cell code:Maybe ^cell data:Maybe ^cell = SendParameters
;;

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int bounce, slice to, int value, int mode, cell body, cell code, cell data) inline {
    return (bounce, to, value, mode, body, code, data);
}

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode(int bounce, slice to, int value, int mode) inline {
    return (bounce, to, value, mode, null(), null(), null());
}

;;
;; Type: Deploy
;; Header: 0x946a98b6
;; TLB: deploy#946a98b6 queryId:uint64 = Deploy
;;

(slice, ((int))) $Deploy$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2490013878);
    var v'queryId = sc_0~load_uint(64);
    return (sc_0, (v'queryId));
}

;;
;; Type: DeployOk
;; Header: 0xaff90f57
;; TLB: deploy_ok#aff90f57 queryId:uint64 = DeployOk
;;

builder $DeployOk$_store(builder build_0, (int) v) inline {
    var (v'queryId) = v;
    build_0 = store_uint(build_0, 2952335191, 32);
    build_0 = build_0.store_uint(v'queryId, 64);
    return build_0;
}

cell $DeployOk$_store_cell((int) v) inline {
    return $DeployOk$_store(begin_cell(), v).end_cell();
}

((int)) $DeployOk$_constructor_queryId(int queryId) inline {
    return (queryId);
}

;;
;; Type: ClaimPrizeDebtInternal
;; Header: 0x3dc1492c
;; TLB: claim_prize_debt_internal#3dc1492c amount:coins user:address draw:address period:uint32 = ClaimPrizeDebtInternal
;;

(slice, ((int, slice, slice, int))) $ClaimPrizeDebtInternal$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 1036077356);
    var v'amount = sc_0~load_coins();
    var v'user = sc_0~__tact_load_address();
    var v'draw = sc_0~__tact_load_address();
    var v'period = sc_0~load_uint(32);
    return (sc_0, (v'amount, v'user, v'draw, v'period));
}

;;
;; Type: PrizeReserveData
;; TLB: _ pool_master:address balance:coins = PrizeReserveData
;;

(slice, int) $PrizeReserveData$_to_external(((slice, int)) v) inline {
    var (v'pool_master, v'balance) = v; 
    return (v'pool_master, v'balance);
}

((slice, int)) $PrizeReserveData$_constructor_pool_master_balance(slice pool_master, int balance) inline {
    return (pool_master, balance);
}

;;
;; Type: PoolAccount
;;

builder $PoolAccount$init$_store(builder build_0, (slice, slice, slice) v) inline {
    var (v'owner, v'master, v'prize_reserve) = v;
    build_0 = __tact_store_address(build_0, v'owner);
    build_0 = __tact_store_address(build_0, v'master);
    build_0 = __tact_store_address(build_0, v'prize_reserve);
    return build_0;
}

(cell, cell) $PoolAccount$_init_child(cell sys', slice $owner, slice $master, slice $prize_reserve) inline {
    slice sc' = sys'.begin_parse();
    cell source = sc'~load_dict();
    cell contracts = new_dict();
    
    ;; Contract Code: PoolAccount
    cell mine = __tact_dict_get_code(source, 23481);
    contracts = __tact_dict_set_code(contracts, 23481, mine);
    
    ;; Contract Code: Draw
    cell code_9326 = __tact_dict_get_code(source, 9326);
    contracts = __tact_dict_set_code(contracts, 9326, code_9326);
    
    ;; Contract Code: Ticket
    cell code_42189 = __tact_dict_get_code(source, 42189);
    contracts = __tact_dict_set_code(contracts, 42189, code_42189);
    
    ;; Build cell
    builder b = begin_cell();
    b = b.store_ref(begin_cell().store_dict(contracts).end_cell());
    b = b.store_int(false, 1);
    b = $PoolAccount$init$_store(b, ($owner, $master, $prize_reserve));
    return (mine, b.end_cell());
}

;;
;; Type: Ticket
;;

builder $Ticket$init$_store(builder build_0, (slice, slice, slice, int) v) inline {
    var (v'owner, v'pool_account, v'draw, v'period) = v;
    build_0 = __tact_store_address(build_0, v'owner);
    build_0 = __tact_store_address(build_0, v'pool_account);
    build_0 = __tact_store_address(build_0, v'draw);
    var build_1 = begin_cell();
    build_1 = build_1.store_int(v'period, 257);
    build_0 = store_ref(build_0, build_1.end_cell());
    return build_0;
}

(cell, cell) $Ticket$_init_child(cell sys', slice $owner, slice $pool_account, slice $draw, int $period) inline {
    slice sc' = sys'.begin_parse();
    cell source = sc'~load_dict();
    cell contracts = new_dict();
    
    ;; Contract Code: Ticket
    cell mine = __tact_dict_get_code(source, 42189);
    contracts = __tact_dict_set_code(contracts, 42189, mine);
    
    ;; Build cell
    builder b = begin_cell();
    b = b.store_ref(begin_cell().store_dict(contracts).end_cell());
    b = b.store_int(false, 1);
    b = $Ticket$init$_store(b, ($owner, $pool_account, $draw, $period));
    return (mine, b.end_cell());
}

;;
;; Type: PrizeReserve
;;

builder $PrizeReserve$_store(builder build_0, (slice) v) inline {
    var (v'pool_master) = v;
    build_0 = __tact_store_address(build_0, v'pool_master);
    return build_0;
}

(slice, ((slice))) $PrizeReserve$_load(slice sc_0) inline {
    var v'pool_master = sc_0~__tact_load_address();
    return (sc_0, (v'pool_master));
}

(slice, ((slice))) $PrizeReserve$init$_load(slice sc_0) inline {
    var v'pool_master = sc_0~__tact_load_address();
    return (sc_0, (v'pool_master));
}

(slice) $PrizeReserve$_contract_load() impure inline_ref {
    slice $sc = get_data().begin_parse();
    __tact_context_sys = $sc~load_ref();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~$PrizeReserve$_load();
    } else {
        ;; Allow only workchain deployments
        throw_unless(137, my_address().preload_uint(11) == 1024);
        (slice pool_master) = $sc~$PrizeReserve$init$_load();
        $sc.end_parse();
        return $PrizeReserve$_contract_init(pool_master);
    }
}

() $PrizeReserve$_contract_store((slice) v) impure inline {
    builder b = begin_cell();
    b = b.store_ref(__tact_context_sys);
    b = b.store_int(true, 1);
    b = $PrizeReserve$_store(b, v);
    set_data(b.end_cell());
}