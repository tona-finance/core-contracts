;;
;; Type: StateInit
;; TLB: _ code:^cell data:^cell = StateInit
;;

_ $StateInit$_get_code((cell, cell) v) inline {
    var (v'code, v'data) = v;
    return v'code;
}

((cell, cell)) $StateInit$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (cell vvv'code, cell vvv'data) = __tact_tuple_destroy_2(v);
    return (vvv'code, vvv'data);
}

;;
;; Type: SendParameters
;; TLB: _ bounce:bool to:address value:int257 mode:int257 body:Maybe ^cell code:Maybe ^cell data:Maybe ^cell = SendParameters
;;

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int bounce, slice to, int value, int mode, cell body, cell code, cell data) inline {
    return (bounce, to, value, mode, body, code, data);
}

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body(int bounce, slice to, int value, int mode, cell body) inline {
    return (bounce, to, value, mode, body, null(), null());
}

;;
;; Type: Twab
;; TLB: _ timestamp:uint64 amount:uint128 = Twab
;;

builder $Twab$_store(builder build_0, (int, int) v) inline {
    var (v'timestamp, v'amount) = v;
    build_0 = build_0.store_uint(v'timestamp, 64);
    build_0 = build_0.store_uint(v'amount, 128);
    return build_0;
}

(slice, ((int, int))) $Twab$_load(slice sc_0) inline {
    var v'timestamp = sc_0~load_uint(64);
    var v'amount = sc_0~load_uint(128);
    return (sc_0, (v'timestamp, v'amount));
}

((int, int)) $Twab$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (int vvv'timestamp, int vvv'amount) = __tact_tuple_destroy_2(v);
    return (vvv'timestamp, vvv'amount);
}

tuple $Twab$_as_optional((int, int) v) inline {
    var (v'timestamp, v'amount) = v;
    return __tact_tuple_create_2(v'timestamp, v'amount);
}

((int, int)) $Twab$_tensor_cast((int, int) v) asm "NOP";

tuple $Twab$_to_tuple(((int, int)) v) inline {
    var (v'timestamp, v'amount) = v;
    return __tact_tuple_create_2(v'timestamp, v'amount);
}

((int, int)) $Twab$_constructor_timestamp_amount(int timestamp, int amount) inline {
    return (timestamp, amount);
}

;;
;; Type: TokenNotification
;; Header: 0x7362d09c
;; TLB: token_notification#7362d09c query_id:uint64 amount:coins from:address forward_payload:remainder<slice> = TokenNotification
;;

(slice, ((int, int, slice, slice))) $TokenNotification$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 1935855772);
    var v'query_id = sc_0~load_uint(64);
    var v'amount = sc_0~load_coins();
    var v'from = sc_0~__tact_load_address();
    var v'forward_payload = sc_0;
    return (sc_0, (v'query_id, v'amount, v'from, v'forward_payload));
}

;;
;; Type: TokenTransfer
;; Header: 0x0f8a7ea5
;; TLB: token_transfer#0f8a7ea5 query_id:uint64 amount:coins destination:address response_destination:address custom_payload:Maybe ^cell forward_ton_amount:coins forward_payload:remainder<slice> = TokenTransfer
;;

builder $TokenTransfer$_store(builder build_0, (int, int, slice, slice, cell, int, slice) v) inline_ref {
    var (v'query_id, v'amount, v'destination, v'response_destination, v'custom_payload, v'forward_ton_amount, v'forward_payload) = v;
    build_0 = store_uint(build_0, 260734629, 32);
    build_0 = build_0.store_uint(v'query_id, 64);
    build_0 = build_0.store_coins(v'amount);
    build_0 = __tact_store_address(build_0, v'destination);
    build_0 = __tact_store_address(build_0, v'response_destination);
    build_0 = ~ null?(v'custom_payload) ? build_0.store_int(true, 1).store_ref(v'custom_payload) : build_0.store_int(false, 1);
    build_0 = build_0.store_coins(v'forward_ton_amount);
    build_0 = build_0.store_slice(v'forward_payload);
    return build_0;
}

cell $TokenTransfer$_store_cell((int, int, slice, slice, cell, int, slice) v) inline {
    return $TokenTransfer$_store(begin_cell(), v).end_cell();
}

((int, int, slice, slice, cell, int, slice)) $TokenTransfer$_constructor_query_id_amount_destination_response_destination_custom_payload_forward_ton_amount_forward_payload(int query_id, int amount, slice destination, slice response_destination, cell custom_payload, int forward_ton_amount, slice forward_payload) inline {
    return (query_id, amount, destination, response_destination, custom_payload, forward_ton_amount, forward_payload);
}

;;
;; Type: InitTicketInternal1
;; Header: 0xb635015f
;; TLB: init_ticket_internal1#b635015f period:uint32 start:uint64 end:uint64 avg_balance:coins = InitTicketInternal1
;;

builder $InitTicketInternal1$_store(builder build_0, (int, int, int, int) v) inline {
    var (v'period, v'start, v'end, v'avg_balance) = v;
    build_0 = store_uint(build_0, 3056927071, 32);
    build_0 = build_0.store_uint(v'period, 32);
    build_0 = build_0.store_uint(v'start, 64);
    build_0 = build_0.store_uint(v'end, 64);
    build_0 = build_0.store_coins(v'avg_balance);
    return build_0;
}

cell $InitTicketInternal1$_store_cell((int, int, int, int) v) inline {
    return $InitTicketInternal1$_store(begin_cell(), v).end_cell();
}

((int, int, int, int)) $InitTicketInternal1$_constructor_period_start_end_avg_balance(int period, int start, int end, int avg_balance) inline {
    return (period, start, end, avg_balance);
}

;;
;; Type: InitDrawInternal
;; Header: 0x3c664220
;; TLB: init_draw_internal#3c664220 deployer:address jetton_wallet:address twab_timestamp:uint64 twab_amount:uint128 = InitDrawInternal
;;

(slice, ((slice, slice, int, int))) $InitDrawInternal$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 1013334560);
    var v'deployer = sc_0~__tact_load_address();
    var v'jetton_wallet = sc_0~__tact_load_address();
    var v'twab_timestamp = sc_0~load_uint(64);
    var v'twab_amount = sc_0~load_uint(128);
    return (sc_0, (v'deployer, v'jetton_wallet, v'twab_timestamp, v'twab_amount));
}

;;
;; Type: InitTicket
;; Header: 0x94b4cb51
;; TLB: init_ticket#94b4cb51 pool_account:address = InitTicket
;;

(slice, ((slice))) $InitTicket$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2494876497);
    var v'pool_account = sc_0~__tact_load_address();
    return (sc_0, (v'pool_account));
}

;;
;; Type: ClaimPrizeInternal
;; Header: 0x579ddb5b
;; TLB: claim_prize_internal#579ddb5b query_id:uint64 user:address pool_account:address pick_payload:remainder<slice> = ClaimPrizeInternal
;;

(slice, ((int, slice, slice, slice))) $ClaimPrizeInternal$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 1469963099);
    var v'query_id = sc_0~load_uint(64);
    var v'user = sc_0~__tact_load_address();
    var v'pool_account = sc_0~__tact_load_address();
    var v'pick_payload = sc_0;
    return (sc_0, (v'query_id, v'user, v'pool_account, v'pick_payload));
}

;;
;; Type: PayPrizeDebtInternal
;; Header: 0x59d2c79e
;; TLB: pay_prize_debt_internal#59d2c79e user:address amount:coins = PayPrizeDebtInternal
;;

builder $PayPrizeDebtInternal$_store(builder build_0, (slice, int) v) inline {
    var (v'user, v'amount) = v;
    build_0 = store_uint(build_0, 1506985886, 32);
    build_0 = __tact_store_address(build_0, v'user);
    build_0 = build_0.store_coins(v'amount);
    return build_0;
}

cell $PayPrizeDebtInternal$_store_cell((slice, int) v) inline {
    return $PayPrizeDebtInternal$_store(begin_cell(), v).end_cell();
}

((slice, int)) $PayPrizeDebtInternal$_constructor_user_amount(slice user, int amount) inline {
    return (user, amount);
}

;;
;; Type: DrawData
;; TLB: _ active:bool pool_master:address prize_reserve:address jetton_wallet:address period:uint32 start:Twab{timestamp:uint64,amount:uint128} end:Twab{timestamp:uint64,amount:uint128} prize_amount:coins winning_number:uint32 deadline:uint64 avail_prize_amount:coins = DrawData
;;

(int, slice, slice, slice, int, tuple, tuple, int, int, int, int) $DrawData$_to_external(((int, slice, slice, slice, int, (int, int), (int, int), int, int, int, int)) v) inline {
    var (v'active, v'pool_master, v'prize_reserve, v'jetton_wallet, v'period, v'start, v'end, v'prize_amount, v'winning_number, v'deadline, v'avail_prize_amount) = v; 
    return (v'active, v'pool_master, v'prize_reserve, v'jetton_wallet, v'period, $Twab$_to_tuple(v'start), $Twab$_to_tuple(v'end), v'prize_amount, v'winning_number, v'deadline, v'avail_prize_amount);
}

((int, slice, slice, slice, int, (int, int), (int, int), int, int, int, int)) $DrawData$_constructor_active_pool_master_prize_reserve_jetton_wallet_period_start_end_prize_amount_winning_number_deadline_avail_prize_amount(int active, slice pool_master, slice prize_reserve, slice jetton_wallet, int period, (int, int) start, (int, int) end, int prize_amount, int winning_number, int deadline, int avail_prize_amount) inline {
    return (active, pool_master, prize_reserve, jetton_wallet, period, start, end, prize_amount, winning_number, deadline, avail_prize_amount);
}

;;
;; Type: Ticket
;;

builder $Ticket$init$_store(builder build_0, (slice, slice, slice, int) v) inline {
    var (v'owner, v'pool_account, v'draw, v'period) = v;
    build_0 = __tact_store_address(build_0, v'owner);
    build_0 = __tact_store_address(build_0, v'pool_account);
    build_0 = __tact_store_address(build_0, v'draw);
    var build_1 = begin_cell();
    build_1 = build_1.store_int(v'period, 257);
    build_0 = store_ref(build_0, build_1.end_cell());
    return build_0;
}

(cell, cell) $Ticket$_init_child(cell sys', slice $owner, slice $pool_account, slice $draw, int $period) inline {
    slice sc' = sys'.begin_parse();
    cell source = sc'~load_dict();
    cell contracts = new_dict();
    
    ;; Contract Code: Ticket
    cell mine = __tact_dict_get_code(source, 42189);
    contracts = __tact_dict_set_code(contracts, 42189, mine);
    
    ;; Build cell
    builder b = begin_cell();
    b = b.store_ref(begin_cell().store_dict(contracts).end_cell());
    b = b.store_int(false, 1);
    b = $Ticket$init$_store(b, ($owner, $pool_account, $draw, $period));
    return (mine, b.end_cell());
}

;;
;; Type: Draw
;;

builder $Draw$_store(builder build_0, (int, slice, int, slice, tuple, tuple, int, int, cell, int, int, slice) v) inline {
    var (v'active, v'pool_master, v'period, v'jetton_wallet, v'start, v'end, v'prize_amount, v'winning_number, v'prize_percentage, v'deadline, v'avail_prize_amount, v'reserve) = v;
    build_0 = build_0.store_int(v'active, 1);
    build_0 = __tact_store_address(build_0, v'pool_master);
    build_0 = build_0.store_uint(v'period, 32);
    build_0 = __tact_store_address_opt(build_0, v'jetton_wallet);
    build_0 = ~ null?(v'start) ? build_0.store_int(true, 1).$Twab$_store($Twab$_not_null(v'start)) : build_0.store_int(false, 1);
    build_0 = ~ null?(v'end) ? build_0.store_int(true, 1).$Twab$_store($Twab$_not_null(v'end)) : build_0.store_int(false, 1);
    var build_1 = begin_cell();
    build_1 = build_1.store_coins(v'prize_amount);
    build_1 = build_1.store_uint(v'winning_number, 32);
    build_1 = build_1.store_dict(v'prize_percentage);
    build_1 = build_1.store_uint(v'deadline, 64);
    build_1 = build_1.store_coins(v'avail_prize_amount);
    build_1 = __tact_store_address(build_1, v'reserve);
    build_0 = store_ref(build_0, build_1.end_cell());
    return build_0;
}

(slice, ((int, slice, int, slice, tuple, tuple, int, int, cell, int, int, slice))) $Draw$_load(slice sc_0) inline {
    var v'active = sc_0~load_int(1);
    var v'pool_master = sc_0~__tact_load_address();
    var v'period = sc_0~load_uint(32);
    var v'jetton_wallet = sc_0~__tact_load_address_opt();
    var v'start = sc_0~load_int(1) ? $Twab$_as_optional(sc_0~$Twab$_load()) : null();
    var v'end = sc_0~load_int(1) ? $Twab$_as_optional(sc_0~$Twab$_load()) : null();
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'prize_amount = sc_1~load_coins();
    var v'winning_number = sc_1~load_uint(32);
    var v'prize_percentage = sc_1~load_dict();
    var v'deadline = sc_1~load_uint(64);
    var v'avail_prize_amount = sc_1~load_coins();
    var v'reserve = sc_1~__tact_load_address();
    return (sc_0, (v'active, v'pool_master, v'period, v'jetton_wallet, v'start, v'end, v'prize_amount, v'winning_number, v'prize_percentage, v'deadline, v'avail_prize_amount, v'reserve));
}

(slice, ((slice, slice, int))) $Draw$init$_load(slice sc_0) inline {
    var v'pool_master = sc_0~__tact_load_address();
    var v'reserve = sc_0~__tact_load_address();
    var v'period = sc_0~load_int(257);
    return (sc_0, (v'pool_master, v'reserve, v'period));
}

(int, slice, int, slice, tuple, tuple, int, int, cell, int, int, slice) $Draw$_contract_load() impure inline_ref {
    slice $sc = get_data().begin_parse();
    __tact_context_sys = $sc~load_ref();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~$Draw$_load();
    } else {
        ;; Allow only workchain deployments
        throw_unless(137, my_address().preload_uint(11) == 1024);
        (slice pool_master, slice reserve, int period) = $sc~$Draw$init$_load();
        $sc.end_parse();
        return $Draw$_contract_init(pool_master, reserve, period);
    }
}

() $Draw$_contract_store((int, slice, int, slice, tuple, tuple, int, int, cell, int, int, slice) v) impure inline {
    builder b = begin_cell();
    b = b.store_ref(__tact_context_sys);
    b = b.store_int(true, 1);
    b = $Draw$_store(b, v);
    set_data(b.end_cell());
}