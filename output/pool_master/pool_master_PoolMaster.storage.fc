;;
;; Type: StateInit
;; TLB: _ code:^cell data:^cell = StateInit
;;

_ $StateInit$_get_code((cell, cell) v) inline {
    var (v'code, v'data) = v;
    return v'code;
}

((cell, cell)) $StateInit$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (cell vvv'code, cell vvv'data) = __tact_tuple_destroy_2(v);
    return (vvv'code, vvv'data);
}

tuple $StateInit$_as_optional((cell, cell) v) inline {
    var (v'code, v'data) = v;
    return __tact_tuple_create_2(v'code, v'data);
}

((cell, cell)) $StateInit$_constructor_code_data(cell code, cell data) inline {
    return (code, data);
}

;;
;; Type: SendParameters
;; TLB: _ bounce:bool to:address value:int257 mode:int257 body:Maybe ^cell code:Maybe ^cell data:Maybe ^cell = SendParameters
;;

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int bounce, slice to, int value, int mode, cell body, cell code, cell data) inline {
    return (bounce, to, value, mode, body, code, data);
}

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body(int bounce, slice to, int value, int mode, cell body) inline {
    return (bounce, to, value, mode, body, null(), null());
}

;;
;; Type: Deploy
;; Header: 0x946a98b6
;; TLB: deploy#946a98b6 queryId:uint64 = Deploy
;;

(slice, ((int))) $Deploy$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2490013878);
    var v'queryId = sc_0~load_uint(64);
    return (sc_0, (v'queryId));
}

;;
;; Type: DeployOk
;; Header: 0xaff90f57
;; TLB: deploy_ok#aff90f57 queryId:uint64 = DeployOk
;;

builder $DeployOk$_store(builder build_0, (int) v) inline {
    var (v'queryId) = v;
    build_0 = store_uint(build_0, 2952335191, 32);
    build_0 = build_0.store_uint(v'queryId, 64);
    return build_0;
}

cell $DeployOk$_store_cell((int) v) inline {
    return $DeployOk$_store(begin_cell(), v).end_cell();
}

((int)) $DeployOk$_constructor_queryId(int queryId) inline {
    return (queryId);
}

;;
;; Type: Twab
;; TLB: _ timestamp:uint64 amount:uint128 = Twab
;;

builder $Twab$_store(builder build_0, (int, int) v) inline {
    var (v'timestamp, v'amount) = v;
    build_0 = build_0.store_uint(v'timestamp, 64);
    build_0 = build_0.store_uint(v'amount, 128);
    return build_0;
}

(slice, ((int, int))) $Twab$_load(slice sc_0) inline {
    var v'timestamp = sc_0~load_uint(64);
    var v'amount = sc_0~load_uint(128);
    return (sc_0, (v'timestamp, v'amount));
}

tuple $Twab$_to_tuple(((int, int)) v) inline {
    var (v'timestamp, v'amount) = v;
    return __tact_tuple_create_2(v'timestamp, v'amount);
}

((int, int)) $Twab$_constructor_timestamp_amount(int timestamp, int amount) inline {
    return (timestamp, amount);
}

;;
;; Type: TokenNotification
;; Header: 0x7362d09c
;; TLB: token_notification#7362d09c query_id:uint64 amount:coins from:address forward_payload:remainder<slice> = TokenNotification
;;

(slice, ((int, int, slice, slice))) $TokenNotification$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 1935855772);
    var v'query_id = sc_0~load_uint(64);
    var v'amount = sc_0~load_coins();
    var v'from = sc_0~__tact_load_address();
    var v'forward_payload = sc_0;
    return (sc_0, (v'query_id, v'amount, v'from, v'forward_payload));
}

;;
;; Type: TokenTransfer
;; Header: 0x0f8a7ea5
;; TLB: token_transfer#0f8a7ea5 query_id:uint64 amount:coins destination:address response_destination:address custom_payload:Maybe ^cell forward_ton_amount:coins forward_payload:remainder<slice> = TokenTransfer
;;

builder $TokenTransfer$_store(builder build_0, (int, int, slice, slice, cell, int, slice) v) inline_ref {
    var (v'query_id, v'amount, v'destination, v'response_destination, v'custom_payload, v'forward_ton_amount, v'forward_payload) = v;
    build_0 = store_uint(build_0, 260734629, 32);
    build_0 = build_0.store_uint(v'query_id, 64);
    build_0 = build_0.store_coins(v'amount);
    build_0 = __tact_store_address(build_0, v'destination);
    build_0 = __tact_store_address(build_0, v'response_destination);
    build_0 = ~ null?(v'custom_payload) ? build_0.store_int(true, 1).store_ref(v'custom_payload) : build_0.store_int(false, 1);
    build_0 = build_0.store_coins(v'forward_ton_amount);
    build_0 = build_0.store_slice(v'forward_payload);
    return build_0;
}

cell $TokenTransfer$_store_cell((int, int, slice, slice, cell, int, slice) v) inline {
    return $TokenTransfer$_store(begin_cell(), v).end_cell();
}

((int, int, slice, slice, cell, int, slice)) $TokenTransfer$_constructor_query_id_amount_destination_response_destination_custom_payload_forward_ton_amount_forward_payload(int query_id, int amount, slice destination, slice response_destination, cell custom_payload, int forward_ton_amount, slice forward_payload) inline {
    return (query_id, amount, destination, response_destination, custom_payload, forward_ton_amount, forward_payload);
}

;;
;; Type: SetPrize
;; Header: 0xd3643815
;; TLB: set_prize#d3643815 amount:coins = SetPrize
;;

(slice, ((int))) $SetPrize$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 3546560533);
    var v'amount = sc_0~load_coins();
    return (sc_0, (v'amount));
}

;;
;; Type: WithdrawInternal
;; Header: 0x94ec1014
;; TLB: withdraw_internal#94ec1014 query_id:uint64 user:address withdraw_amount:coins acc_contribute_amount:coins acc_withdraw_amount:coins = WithdrawInternal
;;

(slice, ((int, slice, int, int, int))) $WithdrawInternal$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2498498580);
    var v'query_id = sc_0~load_uint(64);
    var v'user = sc_0~__tact_load_address();
    var v'withdraw_amount = sc_0~load_coins();
    var v'acc_contribute_amount = sc_0~load_coins();
    var v'acc_withdraw_amount = sc_0~load_coins();
    return (sc_0, (v'query_id, v'user, v'withdraw_amount, v'acc_contribute_amount, v'acc_withdraw_amount));
}

;;
;; Type: WithdrawFinishInternal
;; Header: 0xb0cd96ea
;; TLB: withdraw_finish_internal#b0cd96ea query_id:uint64 user:address timestamp:uint64 amount:coins = WithdrawFinishInternal
;;

(slice, ((int, slice, int, int))) $WithdrawFinishInternal$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2966263530);
    var v'query_id = sc_0~load_uint(64);
    var v'user = sc_0~__tact_load_address();
    var v'timestamp = sc_0~load_uint(64);
    var v'amount = sc_0~load_coins();
    return (sc_0, (v'query_id, v'user, v'timestamp, v'amount));
}

;;
;; Type: DepositNotify
;; Header: 0x1c2e6481
;; TLB: deposit_notify#1c2e6481 query_id:uint64 timestamp:uint64 share_amount:coins contribute_amount:coins = DepositNotify
;;

builder $DepositNotify$_store(builder build_0, (int, int, int, int) v) inline {
    var (v'query_id, v'timestamp, v'share_amount, v'contribute_amount) = v;
    build_0 = store_uint(build_0, 472802433, 32);
    build_0 = build_0.store_uint(v'query_id, 64);
    build_0 = build_0.store_uint(v'timestamp, 64);
    build_0 = build_0.store_coins(v'share_amount);
    build_0 = build_0.store_coins(v'contribute_amount);
    return build_0;
}

cell $DepositNotify$_store_cell((int, int, int, int) v) inline {
    return $DepositNotify$_store(begin_cell(), v).end_cell();
}

((int, int, int, int)) $DepositNotify$_constructor_query_id_timestamp_share_amount_contribute_amount(int query_id, int timestamp, int share_amount, int contribute_amount) inline {
    return (query_id, timestamp, share_amount, contribute_amount);
}

;;
;; Type: WithdrawNotify
;; Header: 0xdf537789
;; TLB: withdraw_notify#df537789 query_id:uint64 timestamp:uint64 share_amount:coins = WithdrawNotify
;;

builder $WithdrawNotify$_store(builder build_0, (int, int, int) v) inline {
    var (v'query_id, v'timestamp, v'share_amount) = v;
    build_0 = store_uint(build_0, 3746789257, 32);
    build_0 = build_0.store_uint(v'query_id, 64);
    build_0 = build_0.store_uint(v'timestamp, 64);
    build_0 = build_0.store_coins(v'share_amount);
    return build_0;
}

cell $WithdrawNotify$_store_cell((int, int, int) v) inline {
    return $WithdrawNotify$_store(begin_cell(), v).end_cell();
}

((int, int, int)) $WithdrawNotify$_constructor_query_id_timestamp_share_amount(int query_id, int timestamp, int share_amount) inline {
    return (query_id, timestamp, share_amount);
}

;;
;; Type: InitPoolAccountInternal
;; Header: 0x388876b7
;; TLB: init_pool_account_internal#388876b7 jetton_wallet:address = InitPoolAccountInternal
;;

builder $InitPoolAccountInternal$_store(builder build_0, (slice) v) inline {
    var (v'jetton_wallet) = v;
    build_0 = store_uint(build_0, 948467383, 32);
    build_0 = __tact_store_address(build_0, v'jetton_wallet);
    return build_0;
}

cell $InitPoolAccountInternal$_store_cell((slice) v) inline {
    return $InitPoolAccountInternal$_store(begin_cell(), v).end_cell();
}

((slice)) $InitPoolAccountInternal$_constructor_jetton_wallet(slice jetton_wallet) inline {
    return (jetton_wallet);
}

;;
;; Type: InitDrawInternal
;; Header: 0x3c664220
;; TLB: init_draw_internal#3c664220 deployer:address jetton_wallet:address twab_timestamp:uint64 twab_amount:uint128 = InitDrawInternal
;;

builder $InitDrawInternal$_store(builder build_0, (slice, slice, int, int) v) inline {
    var (v'deployer, v'jetton_wallet, v'twab_timestamp, v'twab_amount) = v;
    build_0 = store_uint(build_0, 1013334560, 32);
    build_0 = __tact_store_address(build_0, v'deployer);
    build_0 = __tact_store_address(build_0, v'jetton_wallet);
    build_0 = build_0.store_uint(v'twab_timestamp, 64);
    build_0 = build_0.store_uint(v'twab_amount, 128);
    return build_0;
}

cell $InitDrawInternal$_store_cell((slice, slice, int, int) v) inline {
    return $InitDrawInternal$_store(begin_cell(), v).end_cell();
}

((slice, slice, int, int)) $InitDrawInternal$_constructor_deployer_jetton_wallet_twab_timestamp_twab_amount(slice deployer, slice jetton_wallet, int twab_timestamp, int twab_amount) inline {
    return (deployer, jetton_wallet, twab_timestamp, twab_amount);
}

;;
;; Type: ChangeOwner
;; Header: 0x819dbe99
;; TLB: change_owner#819dbe99 queryId:uint64 newOwner:address = ChangeOwner
;;

(slice, ((int, slice))) $ChangeOwner$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2174598809);
    var v'queryId = sc_0~load_uint(64);
    var v'newOwner = sc_0~__tact_load_address();
    return (sc_0, (v'queryId, v'newOwner));
}

;;
;; Type: ChangeOwnerOk
;; Header: 0x327b2b4a
;; TLB: change_owner_ok#327b2b4a queryId:uint64 newOwner:address = ChangeOwnerOk
;;

builder $ChangeOwnerOk$_store(builder build_0, (int, slice) v) inline {
    var (v'queryId, v'newOwner) = v;
    build_0 = store_uint(build_0, 846932810, 32);
    build_0 = build_0.store_uint(v'queryId, 64);
    build_0 = __tact_store_address(build_0, v'newOwner);
    return build_0;
}

cell $ChangeOwnerOk$_store_cell((int, slice) v) inline {
    return $ChangeOwnerOk$_store(begin_cell(), v).end_cell();
}

((int, slice)) $ChangeOwnerOk$_constructor_queryId_newOwner(int queryId, slice newOwner) inline {
    return (queryId, newOwner);
}

;;
;; Type: PoolMasterData
;; TLB: _ owner:address staker:address prize_reserve:address twab:Twab{timestamp:uint64,amount:uint128} share_amount:coins contribute_amount:coins spent_amount:coins next_period:uint32 = PoolMasterData
;;

(slice, slice, slice, tuple, int, int, int, int) $PoolMasterData$_to_external(((slice, slice, slice, (int, int), int, int, int, int)) v) inline {
    var (v'owner, v'staker, v'prize_reserve, v'twab, v'share_amount, v'contribute_amount, v'spent_amount, v'next_period) = v; 
    return (v'owner, v'staker, v'prize_reserve, $Twab$_to_tuple(v'twab), v'share_amount, v'contribute_amount, v'spent_amount, v'next_period);
}

((slice, slice, slice, (int, int), int, int, int, int)) $PoolMasterData$_constructor_owner_staker_prize_reserve_twab_share_amount_contribute_amount_spent_amount_next_period(slice owner, slice staker, slice prize_reserve, (int, int) twab, int share_amount, int contribute_amount, int spent_amount, int next_period) inline {
    return (owner, staker, prize_reserve, twab, share_amount, contribute_amount, spent_amount, next_period);
}

;;
;; Type: Draw
;;

builder $Draw$init$_store(builder build_0, (slice, slice, int) v) inline {
    var (v'pool_master, v'reserve, v'period) = v;
    build_0 = __tact_store_address(build_0, v'pool_master);
    build_0 = __tact_store_address(build_0, v'reserve);
    build_0 = build_0.store_int(v'period, 257);
    return build_0;
}

(cell, cell) $Draw$_init_child(cell sys', slice $pool_master, slice $reserve, int $period) inline {
    slice sc' = sys'.begin_parse();
    cell source = sc'~load_dict();
    cell contracts = new_dict();
    
    ;; Contract Code: Draw
    cell mine = __tact_dict_get_code(source, 9326);
    contracts = __tact_dict_set_code(contracts, 9326, mine);
    
    ;; Contract Code: Ticket
    cell code_42189 = __tact_dict_get_code(source, 42189);
    contracts = __tact_dict_set_code(contracts, 42189, code_42189);
    
    ;; Build cell
    builder b = begin_cell();
    b = b.store_ref(begin_cell().store_dict(contracts).end_cell());
    b = b.store_int(false, 1);
    b = $Draw$init$_store(b, ($pool_master, $reserve, $period));
    return (mine, b.end_cell());
}

;;
;; Type: PoolAccount
;;

builder $PoolAccount$init$_store(builder build_0, (slice, slice, slice, slice) v) inline {
    var (v'owner, v'master, v'staker, v'reserve) = v;
    build_0 = __tact_store_address(build_0, v'owner);
    build_0 = __tact_store_address(build_0, v'master);
    build_0 = __tact_store_address(build_0, v'staker);
    var build_1 = begin_cell();
    build_1 = __tact_store_address(build_1, v'reserve);
    build_0 = store_ref(build_0, build_1.end_cell());
    return build_0;
}

(cell, cell) $PoolAccount$_init_child(cell sys', slice $owner, slice $master, slice $staker, slice $reserve) inline {
    slice sc' = sys'.begin_parse();
    cell source = sc'~load_dict();
    cell contracts = new_dict();
    
    ;; Contract Code: PoolAccount
    cell mine = __tact_dict_get_code(source, 23481);
    contracts = __tact_dict_set_code(contracts, 23481, mine);
    
    ;; Contract Code: Draw
    cell code_9326 = __tact_dict_get_code(source, 9326);
    contracts = __tact_dict_set_code(contracts, 9326, code_9326);
    
    ;; Contract Code: Ticket
    cell code_42189 = __tact_dict_get_code(source, 42189);
    contracts = __tact_dict_set_code(contracts, 42189, code_42189);
    
    ;; Build cell
    builder b = begin_cell();
    b = b.store_ref(begin_cell().store_dict(contracts).end_cell());
    b = b.store_int(false, 1);
    b = $PoolAccount$init$_store(b, ($owner, $master, $staker, $reserve));
    return (mine, b.end_cell());
}

;;
;; Type: PrizeReserve
;;

builder $PrizeReserve$init$_store(builder build_0, (slice, slice, slice, cell) v) inline {
    var (v'pool_master, v'staker, v'jetton_master, v'jetton_wallet_code) = v;
    build_0 = __tact_store_address(build_0, v'pool_master);
    build_0 = __tact_store_address(build_0, v'staker);
    build_0 = __tact_store_address(build_0, v'jetton_master);
    build_0 = build_0.store_ref(v'jetton_wallet_code);
    return build_0;
}

(cell, cell) $PrizeReserve$_init_child(cell sys', slice $pool_master, slice $staker, slice $jetton_master, cell $jetton_wallet_code) inline {
    slice sc' = sys'.begin_parse();
    cell source = sc'~load_dict();
    cell contracts = new_dict();
    
    ;; Contract Code: PrizeReserve
    cell mine = __tact_dict_get_code(source, 46679);
    contracts = __tact_dict_set_code(contracts, 46679, mine);
    
    ;; Contract Code: PoolAccount
    cell code_23481 = __tact_dict_get_code(source, 23481);
    contracts = __tact_dict_set_code(contracts, 23481, code_23481);
    
    ;; Contract Code: Ticket
    cell code_42189 = __tact_dict_get_code(source, 42189);
    contracts = __tact_dict_set_code(contracts, 42189, code_42189);
    
    ;; Contract Code: Draw
    cell code_9326 = __tact_dict_get_code(source, 9326);
    contracts = __tact_dict_set_code(contracts, 9326, code_9326);
    
    ;; Build cell
    builder b = begin_cell();
    b = b.store_ref(begin_cell().store_dict(contracts).end_cell());
    b = b.store_int(false, 1);
    b = $PrizeReserve$init$_store(b, ($pool_master, $staker, $jetton_master, $jetton_wallet_code));
    return (mine, b.end_cell());
}

;;
;; Type: PoolMaster
;;

builder $PoolMaster$_store(builder build_0, (slice, slice, cell, slice, (int, int), int, int, int, int, slice) v) inline {
    var (v'owner, v'jetton_master, v'jetton_wallet_code, v'jetton_wallet, (v'twab'timestamp, v'twab'amount), v'share_amount, v'contribute_amount, v'spent_amount, v'next_period, v'staker) = v;
    build_0 = __tact_store_address(build_0, v'owner);
    build_0 = __tact_store_address(build_0, v'jetton_master);
    build_0 = build_0.store_ref(v'jetton_wallet_code);
    build_0 = __tact_store_address(build_0, v'jetton_wallet);
    build_0 = $Twab$_store(build_0, (v'twab'timestamp, v'twab'amount));
    var build_1 = begin_cell();
    build_1 = build_1.store_coins(v'share_amount);
    build_1 = build_1.store_coins(v'contribute_amount);
    build_1 = build_1.store_coins(v'spent_amount);
    build_1 = build_1.store_uint(v'next_period, 32);
    build_1 = __tact_store_address(build_1, v'staker);
    build_0 = store_ref(build_0, build_1.end_cell());
    return build_0;
}

(slice, ((slice, slice, cell, slice, (int, int), int, int, int, int, slice))) $PoolMaster$_load(slice sc_0) inline {
    var v'owner = sc_0~__tact_load_address();
    var v'jetton_master = sc_0~__tact_load_address();
    var v'jetton_wallet_code = sc_0~load_ref();
    var v'jetton_wallet = sc_0~__tact_load_address();
    var v'twab = sc_0~$Twab$_load();
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'share_amount = sc_1~load_coins();
    var v'contribute_amount = sc_1~load_coins();
    var v'spent_amount = sc_1~load_coins();
    var v'next_period = sc_1~load_uint(32);
    var v'staker = sc_1~__tact_load_address();
    return (sc_0, (v'owner, v'jetton_master, v'jetton_wallet_code, v'jetton_wallet, v'twab, v'share_amount, v'contribute_amount, v'spent_amount, v'next_period, v'staker));
}

(slice, ((slice, slice, slice, cell))) $PoolMaster$init$_load(slice sc_0) inline {
    var v'owner = sc_0~__tact_load_address();
    var v'staker = sc_0~__tact_load_address();
    var v'jetton_master = sc_0~__tact_load_address();
    var v'jetton_wallet_code = sc_0~load_ref();
    return (sc_0, (v'owner, v'staker, v'jetton_master, v'jetton_wallet_code));
}

(slice, slice, cell, slice, (int, int), int, int, int, int, slice) $PoolMaster$_contract_load() impure inline_ref {
    slice $sc = get_data().begin_parse();
    __tact_context_sys = $sc~load_ref();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~$PoolMaster$_load();
    } else {
        ;; Allow only workchain deployments
        throw_unless(137, my_address().preload_uint(11) == 1024);
        (slice owner, slice staker, slice jetton_master, cell jetton_wallet_code) = $sc~$PoolMaster$init$_load();
        $sc.end_parse();
        return $PoolMaster$_contract_init(owner, staker, jetton_master, jetton_wallet_code);
    }
}

() $PoolMaster$_contract_store((slice, slice, cell, slice, (int, int), int, int, int, int, slice) v) impure inline {
    builder b = begin_cell();
    b = b.store_ref(__tact_context_sys);
    b = b.store_int(true, 1);
    b = $PoolMaster$_store(b, v);
    set_data(b.end_cell());
}