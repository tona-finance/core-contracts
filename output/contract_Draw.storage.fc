;;
;; Type: StateInit
;; TLB: _ code:^cell data:^cell = StateInit
;;

((cell, cell)) $StateInit$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (cell vvv'code, cell vvv'data) = __tact_tuple_destroy_2(v);
    return (vvv'code, vvv'data);
}

;;
;; Type: Context
;; TLB: _ bounced:bool sender:address value:int257 raw:^slice = Context
;;

_ $Context$_get_value((int, slice, int, slice) v) inline {
    var (v'bounced, v'sender, v'value, v'raw) = v;
    return v'value;
}

;;
;; Type: SendParameters
;; TLB: _ bounce:bool to:address value:int257 mode:int257 body:Maybe ^cell code:Maybe ^cell data:Maybe ^cell = SendParameters
;;

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int bounce, slice to, int value, int mode, cell body, cell code, cell data) inline {
    return (bounce, to, value, mode, body, code, data);
}

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode(int bounce, slice to, int value, int mode) inline {
    return (bounce, to, value, mode, null(), null(), null());
}

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body(int bounce, slice to, int value, int mode, cell body) inline {
    return (bounce, to, value, mode, body, null(), null());
}

;;
;; Type: Twab
;; TLB: _ timestamp:uint64 amount:uint128 = Twab
;;

builder $Twab$_store(builder build_0, (int, int) v) inline {
    var (v'timestamp, v'amount) = v;
    build_0 = build_0.store_uint(v'timestamp, 64);
    build_0 = build_0.store_uint(v'amount, 128);
    return build_0;
}

(slice, ((int, int))) $Twab$_load(slice sc_0) inline {
    var v'timestamp = sc_0~load_uint(64);
    var v'amount = sc_0~load_uint(128);
    return (sc_0, (v'timestamp, v'amount));
}

((int, int)) $Twab$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (int vvv'timestamp, int vvv'amount) = __tact_tuple_destroy_2(v);
    return (vvv'timestamp, vvv'amount);
}

tuple $Twab$_as_optional((int, int) v) inline {
    var (v'timestamp, v'amount) = v;
    return __tact_tuple_create_2(v'timestamp, v'amount);
}

_ $Twab$_get_timestamp((int, int) v) inline {
    var (v'timestamp, v'amount) = v;
    return v'timestamp;
}

tuple $Twab$_to_tuple(((int, int)) v) inline {
    var (v'timestamp, v'amount) = v;
    return __tact_tuple_create_2(v'timestamp, v'amount);
}

tuple $Twab$_to_opt_tuple(tuple v) inline {
    if (null?(v)) { return null(); } 
    return $Twab$_to_tuple($Twab$_not_null(v)); 
}

((int, int)) $Twab$_constructor_timestamp_amount(int timestamp, int amount) inline {
    return (timestamp, amount);
}

;;
;; Type: PrepareInitTicket
;; Header: 0x46b9f6cb
;; TLB: prepare_init_ticket#46b9f6cb period:uint32 winning_number:uint32 start:uint64 end:uint64 avg_balance:coins = PrepareInitTicket
;;

builder $PrepareInitTicket$_store(builder build_0, (int, int, int, int, int) v) inline {
    var (v'period, v'winning_number, v'start, v'end, v'avg_balance) = v;
    build_0 = store_uint(build_0, 1186592459, 32);
    build_0 = build_0.store_uint(v'period, 32);
    build_0 = build_0.store_uint(v'winning_number, 32);
    build_0 = build_0.store_uint(v'start, 64);
    build_0 = build_0.store_uint(v'end, 64);
    build_0 = build_0.store_coins(v'avg_balance);
    return build_0;
}

cell $PrepareInitTicket$_store_cell((int, int, int, int, int) v) inline {
    return $PrepareInitTicket$_store(begin_cell(), v).end_cell();
}

((int, int, int, int, int)) $PrepareInitTicket$_constructor_period_winning_number_start_end_avg_balance(int period, int winning_number, int start, int end, int avg_balance) inline {
    return (period, winning_number, start, end, avg_balance);
}

;;
;; Type: InitDraw
;; Header: 0xb956078d
;; TLB: init_draw#b956078d twab_timestamp:uint64 twab_amount:uint128 refund_address:address = InitDraw
;;

(slice, ((int, int, slice))) $InitDraw$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 3109422989);
    var v'twab_timestamp = sc_0~load_uint(64);
    var v'twab_amount = sc_0~load_uint(128);
    var v'refund_address = sc_0~__tact_load_address();
    return (sc_0, (v'twab_timestamp, v'twab_amount, v'refund_address));
}

;;
;; Type: OpenDrawInternal
;; Header: 0x8c567c19
;; TLB: open_draw_internal#8c567c19 twab_timestamp:uint64 twab_amount:uint128 refund_address:address = OpenDrawInternal
;;

(slice, ((int, int, slice))) $OpenDrawInternal$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2354478105);
    var v'twab_timestamp = sc_0~load_uint(64);
    var v'twab_amount = sc_0~load_uint(128);
    var v'refund_address = sc_0~__tact_load_address();
    return (sc_0, (v'twab_timestamp, v'twab_amount, v'refund_address));
}

;;
;; Type: InitTicket
;; Header: 0x94b4cb51
;; TLB: init_ticket#94b4cb51 pool_account:address = InitTicket
;;

(slice, ((slice))) $InitTicket$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2494876497);
    var v'pool_account = sc_0~__tact_load_address();
    return (sc_0, (v'pool_account));
}

;;
;; Type: ClaimPrizeInternal
;; Header: 0x8e3ba93f
;; TLB: claim_prize_internal#8e3ba93f user:address pool_account:address prize_scale:uint32 = ClaimPrizeInternal
;;

(slice, ((slice, slice, int))) $ClaimPrizeInternal$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2386274623);
    var v'user = sc_0~__tact_load_address();
    var v'pool_account = sc_0~__tact_load_address();
    var v'prize_scale = sc_0~load_uint(32);
    return (sc_0, (v'user, v'pool_account, v'prize_scale));
}

;;
;; Type: PayPrizeDebtInternal
;; Header: 0x54cb9090
;; TLB: pay_prize_debt_internal#54cb9090 user:address amount:coins period:uint32 = PayPrizeDebtInternal
;;

builder $PayPrizeDebtInternal$_store(builder build_0, (slice, int, int) v) inline {
    var (v'user, v'amount, v'period) = v;
    build_0 = store_uint(build_0, 1422626960, 32);
    build_0 = __tact_store_address(build_0, v'user);
    build_0 = build_0.store_coins(v'amount);
    build_0 = build_0.store_uint(v'period, 32);
    return build_0;
}

cell $PayPrizeDebtInternal$_store_cell((slice, int, int) v) inline {
    return $PayPrizeDebtInternal$_store(begin_cell(), v).end_cell();
}

((slice, int, int)) $PayPrizeDebtInternal$_constructor_user_amount_period(slice user, int amount, int period) inline {
    return (user, amount, period);
}

;;
;; Type: DrawData
;; TLB: _ active:bool pool_master:address prize_reserve:address period:uint32 start:Maybe Twab{timestamp:uint64,amount:uint128} end:Maybe Twab{timestamp:uint64,amount:uint128} prize_amount:coins avail_prize_amount:coins winning_number:uint32 deadline:uint64 = DrawData
;;

(int, slice, slice, int, tuple, tuple, int, int, int, int) $DrawData$_to_external(((int, slice, slice, int, tuple, tuple, int, int, int, int)) v) inline {
    var (v'active, v'pool_master, v'prize_reserve, v'period, v'start, v'end, v'prize_amount, v'avail_prize_amount, v'winning_number, v'deadline) = v; 
    return (v'active, v'pool_master, v'prize_reserve, v'period, $Twab$_to_opt_tuple(v'start), $Twab$_to_opt_tuple(v'end), v'prize_amount, v'avail_prize_amount, v'winning_number, v'deadline);
}

((int, slice, slice, int, tuple, tuple, int, int, int, int)) $DrawData$_constructor_active_pool_master_prize_reserve_period_start_end_prize_amount_avail_prize_amount_winning_number_deadline(int active, slice pool_master, slice prize_reserve, int period, tuple start, tuple end, int prize_amount, int avail_prize_amount, int winning_number, int deadline) inline {
    return (active, pool_master, prize_reserve, period, start, end, prize_amount, avail_prize_amount, winning_number, deadline);
}

;;
;; Type: Draw
;;

builder $Draw$_store(builder build_0, (int, slice, slice, int, tuple, tuple, int, int, int, int) v) inline {
    var (v'active, v'pool_master, v'prize_reserve, v'period, v'start, v'end, v'prize_amount, v'avail_prize_amount, v'winning_number, v'deadline) = v;
    build_0 = build_0.store_int(v'active, 1);
    build_0 = __tact_store_address(build_0, v'pool_master);
    build_0 = __tact_store_address(build_0, v'prize_reserve);
    build_0 = build_0.store_uint(v'period, 32);
    build_0 = ~ null?(v'start) ? build_0.store_int(true, 1).$Twab$_store($Twab$_not_null(v'start)) : build_0.store_int(false, 1);
    build_0 = ~ null?(v'end) ? build_0.store_int(true, 1).$Twab$_store($Twab$_not_null(v'end)) : build_0.store_int(false, 1);
    var build_1 = begin_cell();
    build_1 = build_1.store_coins(v'prize_amount);
    build_1 = build_1.store_coins(v'avail_prize_amount);
    build_1 = build_1.store_uint(v'winning_number, 32);
    build_1 = build_1.store_uint(v'deadline, 64);
    build_0 = store_ref(build_0, build_1.end_cell());
    return build_0;
}

(slice, ((int, slice, slice, int, tuple, tuple, int, int, int, int))) $Draw$_load(slice sc_0) inline {
    var v'active = sc_0~load_int(1);
    var v'pool_master = sc_0~__tact_load_address();
    var v'prize_reserve = sc_0~__tact_load_address();
    var v'period = sc_0~load_uint(32);
    var v'start = sc_0~load_int(1) ? $Twab$_as_optional(sc_0~$Twab$_load()) : null();
    var v'end = sc_0~load_int(1) ? $Twab$_as_optional(sc_0~$Twab$_load()) : null();
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'prize_amount = sc_1~load_coins();
    var v'avail_prize_amount = sc_1~load_coins();
    var v'winning_number = sc_1~load_uint(32);
    var v'deadline = sc_1~load_uint(64);
    return (sc_0, (v'active, v'pool_master, v'prize_reserve, v'period, v'start, v'end, v'prize_amount, v'avail_prize_amount, v'winning_number, v'deadline));
}

(slice, ((slice, slice, int))) $Draw$init$_load(slice sc_0) inline {
    var v'pool_master = sc_0~__tact_load_address();
    var v'prize_reserve = sc_0~__tact_load_address();
    var v'period = sc_0~load_int(257);
    return (sc_0, (v'pool_master, v'prize_reserve, v'period));
}

(int, slice, slice, int, tuple, tuple, int, int, int, int) $Draw$_contract_load() impure inline_ref {
    slice $sc = get_data().begin_parse();
    __tact_context_sys = $sc~load_ref();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~$Draw$_load();
    } else {
        ;; Allow only workchain deployments
        throw_unless(137, my_address().preload_uint(11) == 1024);
        (slice pool_master, slice prize_reserve, int period) = $sc~$Draw$init$_load();
        $sc.end_parse();
        return $Draw$_contract_init(pool_master, prize_reserve, period);
    }
}

() $Draw$_contract_store((int, slice, slice, int, tuple, tuple, int, int, int, int) v) impure inline {
    builder b = begin_cell();
    b = b.store_ref(__tact_context_sys);
    b = b.store_int(true, 1);
    b = $Draw$_store(b, v);
    set_data(b.end_cell());
}

;;
;; Type: Ticket
;;

builder $Ticket$init$_store(builder build_0, (slice, slice, slice, int) v) inline {
    var (v'owner, v'pool_account, v'draw, v'period) = v;
    build_0 = __tact_store_address(build_0, v'owner);
    build_0 = __tact_store_address(build_0, v'pool_account);
    build_0 = __tact_store_address(build_0, v'draw);
    var build_1 = begin_cell();
    build_1 = build_1.store_int(v'period, 257);
    build_0 = store_ref(build_0, build_1.end_cell());
    return build_0;
}

(cell, cell) $Ticket$_init_child(cell sys', slice $owner, slice $pool_account, slice $draw, int $period) inline {
    slice sc' = sys'.begin_parse();
    cell source = sc'~load_dict();
    cell contracts = new_dict();
    
    ;; Contract Code: Ticket
    cell mine = __tact_dict_get_code(source, 42189);
    contracts = __tact_dict_set_code(contracts, 42189, mine);
    
    ;; Build cell
    builder b = begin_cell();
    b = b.store_ref(begin_cell().store_dict(contracts).end_cell());
    b = b.store_int(false, 1);
    b = $Ticket$init$_store(b, ($owner, $pool_account, $draw, $period));
    return (mine, b.end_cell());
}