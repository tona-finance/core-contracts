#pragma version =0.4.3;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

#include "contract_PoolMaster.headers.fc";
#include "contract_PoolMaster.stdlib.fc";
#include "contract_PoolMaster.storage.fc";

;;
;; Contract PoolMaster functions
;;

(int, int) $global_new_twab() impure inline {
    return $Twab$_constructor_timestamp_amount(now(), 0);
}

(slice, (int, int), int, int, int, int) $PoolMaster$_contract_init(slice $owner) impure inline_ref {
    var (($self'owner, ($self'twab'timestamp, $self'twab'amount), $self'share_amount, $self'borrow_amount, $self'prize_amount, $self'next_period)) = (null(), null(), 0, 0, 0, 0);
    $self'owner = $owner;
    ($self'twab'timestamp, $self'twab'amount) = $global_new_twab();
    return ($self'owner, ($self'twab'timestamp, $self'twab'amount), $self'share_amount, $self'borrow_amount, $self'prize_amount, $self'next_period);
}

(int, int) $Twab$_fun_next_twab((int, int) $self, int $balance, int $timestamp) impure inline {
    var (($self'timestamp, $self'amount)) = $self;
    var (($self'timestamp, $self'amount)) = $self;
    throw_unless(19317, ($timestamp >= $self'timestamp));
    return $Twab$_constructor_timestamp_amount($timestamp, ($self'amount + (($timestamp - $self'timestamp) * $balance)));
}

((slice, (int, int), int, int, int, int), slice) $PoolMaster$_fun__get_prize_reserve_address((slice, (int, int), int, int, int, int) $self) impure inline {
    var (($self'owner, ($self'twab'timestamp, $self'twab'amount), $self'share_amount, $self'borrow_amount, $self'prize_amount, $self'next_period)) = $self;
    var ($sinit'code, $sinit'data) = $PrizeReserve$_init_child(__tact_context_sys, my_address());
    return (($self'owner, ($self'twab'timestamp, $self'twab'amount), $self'share_amount, $self'borrow_amount, $self'prize_amount, $self'next_period), $global_contractAddress(($sinit'code, $sinit'data)));
}

((slice, (int, int), int, int, int, int), (cell, cell)) $PoolMaster$_fun__get_account_init((slice, (int, int), int, int, int, int) $self, slice $user) impure inline {
    var (($self'owner, ($self'twab'timestamp, $self'twab'amount), $self'share_amount, $self'borrow_amount, $self'prize_amount, $self'next_period)) = $self;
    slice $prize_reserve = ($self'owner, ($self'twab'timestamp, $self'twab'amount), $self'share_amount, $self'borrow_amount, $self'prize_amount, $self'next_period)~$PoolMaster$_fun__get_prize_reserve_address();
    return (($self'owner, ($self'twab'timestamp, $self'twab'amount), $self'share_amount, $self'borrow_amount, $self'prize_amount, $self'next_period), $PoolAccount$_init_child(__tact_context_sys, $user, my_address(), $prize_reserve));
}

((slice, (int, int), int, int, int, int), (cell, cell)) $PoolMaster$_fun__get_draw_init((slice, (int, int), int, int, int, int) $self, int $period) impure inline {
    var (($self'owner, ($self'twab'timestamp, $self'twab'amount), $self'share_amount, $self'borrow_amount, $self'prize_amount, $self'next_period)) = $self;
    slice $prize_reserve = ($self'owner, ($self'twab'timestamp, $self'twab'amount), $self'share_amount, $self'borrow_amount, $self'prize_amount, $self'next_period)~$PoolMaster$_fun__get_prize_reserve_address();
    return (($self'owner, ($self'twab'timestamp, $self'twab'amount), $self'share_amount, $self'borrow_amount, $self'prize_amount, $self'next_period), $Draw$_init_child(__tact_context_sys, my_address(), $prize_reserve, $period));
}

((slice, (int, int), int, int, int, int), (slice, slice, (int, int), int, int, int, int)) $PoolMaster$_fun_get_core_data((slice, (int, int), int, int, int, int) $self) impure inline {
    var (($self'owner, ($self'twab'timestamp, $self'twab'amount), $self'share_amount, $self'borrow_amount, $self'prize_amount, $self'next_period)) = $self;
    return (($self'owner, ($self'twab'timestamp, $self'twab'amount), $self'share_amount, $self'borrow_amount, $self'prize_amount, $self'next_period), $PoolMasterData$_constructor_owner_prize_reserve_twab_share_amount_borrow_amount_prize_amount_next_period($self'owner, ($self'owner, ($self'twab'timestamp, $self'twab'amount), $self'share_amount, $self'borrow_amount, $self'prize_amount, $self'next_period)~$PoolMaster$_fun__get_prize_reserve_address(), ($self'twab'timestamp, $self'twab'amount), $self'share_amount, $self'borrow_amount, $self'prize_amount, $self'next_period));
}

((slice, (int, int), int, int, int, int), slice) $PoolMaster$_fun__get_account_address((slice, (int, int), int, int, int, int) $self, slice $user) impure inline {
    var (($self'owner, ($self'twab'timestamp, $self'twab'amount), $self'share_amount, $self'borrow_amount, $self'prize_amount, $self'next_period)) = $self;
    var ($sinit'code, $sinit'data) = ($self'owner, ($self'twab'timestamp, $self'twab'amount), $self'share_amount, $self'borrow_amount, $self'prize_amount, $self'next_period)~$PoolMaster$_fun__get_account_init($user);
    return (($self'owner, ($self'twab'timestamp, $self'twab'amount), $self'share_amount, $self'borrow_amount, $self'prize_amount, $self'next_period), $global_contractAddress(($sinit'code, $sinit'data)));
}

((slice, (int, int), int, int, int, int), slice) $PoolMaster$_fun_get_account_address((slice, (int, int), int, int, int, int) $self, slice $user) impure inline {
    var (($self'owner, ($self'twab'timestamp, $self'twab'amount), $self'share_amount, $self'borrow_amount, $self'prize_amount, $self'next_period)) = $self;
    return (($self'owner, ($self'twab'timestamp, $self'twab'amount), $self'share_amount, $self'borrow_amount, $self'prize_amount, $self'next_period), ($self'owner, ($self'twab'timestamp, $self'twab'amount), $self'share_amount, $self'borrow_amount, $self'prize_amount, $self'next_period)~$PoolMaster$_fun__get_account_address($user));
}

((slice, (int, int), int, int, int, int), slice) $PoolMaster$_fun__get_draw_address((slice, (int, int), int, int, int, int) $self, int $period) impure inline {
    var (($self'owner, ($self'twab'timestamp, $self'twab'amount), $self'share_amount, $self'borrow_amount, $self'prize_amount, $self'next_period)) = $self;
    var ($sinit'code, $sinit'data) = ($self'owner, ($self'twab'timestamp, $self'twab'amount), $self'share_amount, $self'borrow_amount, $self'prize_amount, $self'next_period)~$PoolMaster$_fun__get_draw_init($period);
    return (($self'owner, ($self'twab'timestamp, $self'twab'amount), $self'share_amount, $self'borrow_amount, $self'prize_amount, $self'next_period), $global_contractAddress(($sinit'code, $sinit'data)));
}

((slice, (int, int), int, int, int, int), slice) $PoolMaster$_fun_get_draw_address((slice, (int, int), int, int, int, int) $self, int $period) impure inline {
    var (($self'owner, ($self'twab'timestamp, $self'twab'amount), $self'share_amount, $self'borrow_amount, $self'prize_amount, $self'next_period)) = $self;
    return (($self'owner, ($self'twab'timestamp, $self'twab'amount), $self'share_amount, $self'borrow_amount, $self'prize_amount, $self'next_period), ($self'owner, ($self'twab'timestamp, $self'twab'amount), $self'share_amount, $self'borrow_amount, $self'prize_amount, $self'next_period)~$PoolMaster$_fun__get_draw_address($period));
}

((slice, (int, int), int, int, int, int), ()) $PoolMaster$_fun_native_reserve((slice, (int, int), int, int, int, int) $self) impure inline {
    var (($self'owner, ($self'twab'timestamp, $self'twab'amount), $self'share_amount, $self'borrow_amount, $self'prize_amount, $self'next_period)) = $self;
    raw_reserve(((($self'share_amount + $self'prize_amount) + 100000000) - $self'borrow_amount), 0);
    return (($self'owner, ($self'twab'timestamp, $self'twab'amount), $self'share_amount, $self'borrow_amount, $self'prize_amount, $self'next_period), ());
}

((slice, (int, int), int, int, int, int), ()) $PoolMaster$_fun_require_account((slice, (int, int), int, int, int, int) $self, slice $user) impure inline {
    var (($self'owner, ($self'twab'timestamp, $self'twab'amount), $self'share_amount, $self'borrow_amount, $self'prize_amount, $self'next_period)) = $self;
    throw_unless(41207, ( __tact_slice_eq_bits(($self'owner, ($self'twab'timestamp, $self'twab'amount), $self'share_amount, $self'borrow_amount, $self'prize_amount, $self'next_period)~$PoolMaster$_fun__get_account_address($user), __tact_context_get_sender()) ));
    return (($self'owner, ($self'twab'timestamp, $self'twab'amount), $self'share_amount, $self'borrow_amount, $self'prize_amount, $self'next_period), ());
}

((slice, (int, int), int, int, int, int), ()) $PoolMaster$_fun_requireOwner((slice, (int, int), int, int, int, int) $self) impure inline {
    var (($self'owner, ($self'twab'timestamp, $self'twab'amount), $self'share_amount, $self'borrow_amount, $self'prize_amount, $self'next_period)) = $self;
    throw_unless(132, ( __tact_slice_eq_bits($self'owner, __tact_context_get_sender()) ));
    return (($self'owner, ($self'twab'timestamp, $self'twab'amount), $self'share_amount, $self'borrow_amount, $self'prize_amount, $self'next_period), ());
}

((slice, (int, int), int, int, int, int), slice) $PoolMaster$_fun_owner((slice, (int, int), int, int, int, int) $self) impure inline {
    var (($self'owner, ($self'twab'timestamp, $self'twab'amount), $self'share_amount, $self'borrow_amount, $self'prize_amount, $self'next_period)) = $self;
    return (($self'owner, ($self'twab'timestamp, $self'twab'amount), $self'share_amount, $self'borrow_amount, $self'prize_amount, $self'next_period), $self'owner);
}

;;
;; Receivers of a Contract PoolMaster
;;

(((slice, (int, int), int, int, int, int)), ()) %$PoolMaster$_internal_empty((slice, (int, int), int, int, int, int) $self) impure inline {
    var ($self'owner, ($self'twab'timestamp, $self'twab'amount), $self'share_amount, $self'borrow_amount, $self'prize_amount, $self'next_period) = $self;
    var ($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw) = __tact_context_get();
    int $amount = ($ctx'value - 10000000);
    if (($amount > 0)) {
        if (($amount <= $self'borrow_amount)) {
            $self'borrow_amount = ($self'borrow_amount - $amount);
        } else {
            $amount = ($amount - $self'borrow_amount);
            $self'borrow_amount = 0;
            $self'prize_amount = ($self'prize_amount + $amount);
        }
    }
    return (($self'owner, ($self'twab'timestamp, $self'twab'amount), $self'share_amount, $self'borrow_amount, $self'prize_amount, $self'next_period), ());
}

((slice, (int, int), int, int, int, int), ()) $PoolMaster$_internal_text_8b88a4c05aa285f6109e02ad26f6a96999f061987f3790b9484fc0566d9331a2((slice, (int, int), int, int, int, int) $self) impure inline {
    var ($self'owner, ($self'twab'timestamp, $self'twab'amount), $self'share_amount, $self'borrow_amount, $self'prize_amount, $self'next_period) = $self;
    ($self'owner, ($self'twab'timestamp, $self'twab'amount), $self'share_amount, $self'borrow_amount, $self'prize_amount, $self'next_period)~$PoolMaster$_fun_requireOwner();
    throw_unless(17110, ($self'next_period == 0));
    var ($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw) = __tact_context_get();
    throw_unless(2805, ($ctx'value >= 500000000));
    var ($twab'timestamp, $twab'amount) = $Twab$_fun_next_twab(($self'twab'timestamp, $self'twab'amount), $self'share_amount, now());
    var ($sinit'code, $sinit'data) = ($self'owner, ($self'twab'timestamp, $self'twab'amount), $self'share_amount, $self'borrow_amount, $self'prize_amount, $self'next_period)~$PoolMaster$_fun__get_draw_init($self'next_period);
    $self'next_period = ($self'next_period + 1);
    ($self'owner, ($self'twab'timestamp, $self'twab'amount), $self'share_amount, $self'borrow_amount, $self'prize_amount, $self'next_period)~$PoolMaster$_fun_forward($global_contractAddress(($sinit'code, $sinit'data)), $InitDraw$_store_cell($InitDraw$_constructor_twab_timestamp_twab_amount_refund_address($twab'timestamp, $twab'amount, $self'owner)), false, $StateInit$_as_optional(($sinit'code, $sinit'data)));
    return (($self'owner, ($self'twab'timestamp, $self'twab'amount), $self'share_amount, $self'borrow_amount, $self'prize_amount, $self'next_period), ());
}

((slice, (int, int), int, int, int, int), ()) $PoolMaster$_internal_text_104348ebcd6b61d2dfe8922e378059a8807e35b84a8b54b66e554ea818a5b66e((slice, (int, int), int, int, int, int) $self) impure inline {
    var ($self'owner, ($self'twab'timestamp, $self'twab'amount), $self'share_amount, $self'borrow_amount, $self'prize_amount, $self'next_period) = $self;
    ($self'owner, ($self'twab'timestamp, $self'twab'amount), $self'share_amount, $self'borrow_amount, $self'prize_amount, $self'next_period)~$PoolMaster$_fun_requireOwner();
    throw_unless(3556, ($self'next_period > 0));
    var ($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw) = __tact_context_get();
    throw_unless(2805, ($ctx'value >= 600000000));
    var ($twab'timestamp, $twab'amount) = $Twab$_fun_next_twab(($self'twab'timestamp, $self'twab'amount), $self'share_amount, now());
    $global_send($SendParameters$_constructor_bounce_to_value_mode_body(false, ($self'owner, ($self'twab'timestamp, $self'twab'amount), $self'share_amount, $self'borrow_amount, $self'prize_amount, $self'next_period)~$PoolMaster$_fun__get_draw_address(($self'next_period - 1)), ($self'prize_amount + 100000000), 2, $OpenDraw$_store_cell($OpenDraw$_constructor_twab_timestamp_twab_amount_prize_amount_refund_address($twab'timestamp, $twab'amount, $self'prize_amount, $self'owner))));
    $self'prize_amount = 0;
    var ($sinit'code, $sinit'data) = ($self'owner, ($self'twab'timestamp, $self'twab'amount), $self'share_amount, $self'borrow_amount, $self'prize_amount, $self'next_period)~$PoolMaster$_fun__get_draw_init($self'next_period);
    $self'next_period = ($self'next_period + 1);
    ($self'owner, ($self'twab'timestamp, $self'twab'amount), $self'share_amount, $self'borrow_amount, $self'prize_amount, $self'next_period)~$PoolMaster$_fun_native_reserve();
    $global_send($SendParameters$_constructor_bounce_to_value_mode_body_code_data(false, $global_contractAddress(($sinit'code, $sinit'data)), 0, (128 + 2), $InitDraw$_store_cell($InitDraw$_constructor_twab_timestamp_twab_amount_refund_address($twab'timestamp, $twab'amount, $self'owner)), $sinit'code, $sinit'data));
    return (($self'owner, ($self'twab'timestamp, $self'twab'amount), $self'share_amount, $self'borrow_amount, $self'prize_amount, $self'next_period), ());
}

(((slice, (int, int), int, int, int, int)), ()) $PoolMaster$_internal_binary_DepositInternal((slice, (int, int), int, int, int, int) $self, (int, slice) $msg) impure inline {
    var ($self'owner, ($self'twab'timestamp, $self'twab'amount), $self'share_amount, $self'borrow_amount, $self'prize_amount, $self'next_period) = $self;
    var ($msg'amount, $msg'user) = $msg;
    ($self'owner, ($self'twab'timestamp, $self'twab'amount), $self'share_amount, $self'borrow_amount, $self'prize_amount, $self'next_period)~$PoolMaster$_fun_require_account($msg'user);
    int $timestamp = now();
    ($self'twab'timestamp, $self'twab'amount) = $Twab$_fun_next_twab(($self'twab'timestamp, $self'twab'amount), $self'share_amount, $timestamp);
    $self'share_amount = ($self'share_amount + $msg'amount);
    ($self'owner, ($self'twab'timestamp, $self'twab'amount), $self'share_amount, $self'borrow_amount, $self'prize_amount, $self'next_period)~$PoolMaster$_fun_native_reserve();
    $global_send($SendParameters$_constructor_bounce_to_value_mode_body(false, __tact_context_get_sender(), 0, (128 + 2), $DepositFinish$_store_cell($DepositFinish$_constructor_timestamp_amount($timestamp, $msg'amount))));
    return (($self'owner, ($self'twab'timestamp, $self'twab'amount), $self'share_amount, $self'borrow_amount, $self'prize_amount, $self'next_period), ());
}

(((slice, (int, int), int, int, int, int)), ()) $PoolMaster$_internal_binary_WithdrawInternal((slice, (int, int), int, int, int, int) $self, (int, slice) $msg) impure inline {
    var ($self'owner, ($self'twab'timestamp, $self'twab'amount), $self'share_amount, $self'borrow_amount, $self'prize_amount, $self'next_period) = $self;
    var ($msg'amount, $msg'user) = $msg;
    ($self'owner, ($self'twab'timestamp, $self'twab'amount), $self'share_amount, $self'borrow_amount, $self'prize_amount, $self'next_period)~$PoolMaster$_fun_require_account($msg'user);
    throw_unless(54615, (($self'share_amount - $self'borrow_amount) >= $msg'amount));
    int $timestamp = now();
    ($self'twab'timestamp, $self'twab'amount) = $Twab$_fun_next_twab(($self'twab'timestamp, $self'twab'amount), $self'share_amount, $timestamp);
    $self'share_amount = ($self'share_amount - $msg'amount);
    ($self'owner, ($self'twab'timestamp, $self'twab'amount), $self'share_amount, $self'borrow_amount, $self'prize_amount, $self'next_period)~$PoolMaster$_fun_native_reserve();
    $global_send($SendParameters$_constructor_bounce_to_value_mode_body(false, __tact_context_get_sender(), 0, (128 + 2), $WithdrawFinish$_store_cell($WithdrawFinish$_constructor_timestamp_amount($timestamp, $msg'amount))));
    return (($self'owner, ($self'twab'timestamp, $self'twab'amount), $self'share_amount, $self'borrow_amount, $self'prize_amount, $self'next_period), ());
}

(((slice, (int, int), int, int, int, int)), ()) $PoolMaster$_internal_binary_Borrow((slice, (int, int), int, int, int, int) $self, (int) $msg) impure inline {
    var ($self'owner, ($self'twab'timestamp, $self'twab'amount), $self'share_amount, $self'borrow_amount, $self'prize_amount, $self'next_period) = $self;
    var ($msg'amount) = $msg;
    ($self'owner, ($self'twab'timestamp, $self'twab'amount), $self'share_amount, $self'borrow_amount, $self'prize_amount, $self'next_period)~$PoolMaster$_fun_requireOwner();
    $self'borrow_amount = ($self'borrow_amount + $msg'amount);
    ($self'owner, ($self'twab'timestamp, $self'twab'amount), $self'share_amount, $self'borrow_amount, $self'prize_amount, $self'next_period)~$PoolMaster$_fun_native_reserve();
    $global_send($SendParameters$_constructor_bounce_to_value_mode(false, $self'owner, 0, 128));
    return (($self'owner, ($self'twab'timestamp, $self'twab'amount), $self'share_amount, $self'borrow_amount, $self'prize_amount, $self'next_period), ());
}

(((slice, (int, int), int, int, int, int)), ()) $PoolMaster$_internal_binary_ChangeOwner((slice, (int, int), int, int, int, int) $self, (int, slice) $msg) impure inline {
    var ($self'owner, ($self'twab'timestamp, $self'twab'amount), $self'share_amount, $self'borrow_amount, $self'prize_amount, $self'next_period) = $self;
    var ($msg'queryId, $msg'newOwner) = $msg;
    ($self'owner, ($self'twab'timestamp, $self'twab'amount), $self'share_amount, $self'borrow_amount, $self'prize_amount, $self'next_period)~$PoolMaster$_fun_requireOwner();
    $self'owner = $msg'newOwner;
    ($self'owner, ($self'twab'timestamp, $self'twab'amount), $self'share_amount, $self'borrow_amount, $self'prize_amount, $self'next_period)~$PoolMaster$_fun_reply($ChangeOwnerOk$_store_cell($ChangeOwnerOk$_constructor_queryId_newOwner($msg'queryId, $msg'newOwner)));
    return (($self'owner, ($self'twab'timestamp, $self'twab'amount), $self'share_amount, $self'borrow_amount, $self'prize_amount, $self'next_period), ());
}

(((slice, (int, int), int, int, int, int)), ()) $PoolMaster$_internal_binary_Deploy((slice, (int, int), int, int, int, int) $self, (int) $deploy) impure inline {
    var ($self'owner, ($self'twab'timestamp, $self'twab'amount), $self'share_amount, $self'borrow_amount, $self'prize_amount, $self'next_period) = $self;
    var ($deploy'queryId) = $deploy;
    ($self'owner, ($self'twab'timestamp, $self'twab'amount), $self'share_amount, $self'borrow_amount, $self'prize_amount, $self'next_period)~$PoolMaster$_fun_notify($DeployOk$_store_cell($DeployOk$_constructor_queryId($deploy'queryId)));
    return (($self'owner, ($self'twab'timestamp, $self'twab'amount), $self'share_amount, $self'borrow_amount, $self'prize_amount, $self'next_period), ());
}

;;
;; Get methods of a Contract PoolMaster
;;

_ %get_core_data() method_id(119856) {
    var self = $PoolMaster$_contract_load();
    var res = self~$PoolMaster$_fun_get_core_data();
    return $PoolMasterData$_to_external(res);
}

_ %get_account_address(slice $$user) method_id(68369) {
    slice $user = __tact_verify_address($$user);
    var self = $PoolMaster$_contract_load();
    var res = self~$PoolMaster$_fun_get_account_address($user);
    return res;
}

_ %get_draw_address(int $$period) method_id(108309) {
    int $period = $$period;
    var self = $PoolMaster$_contract_load();
    var res = self~$PoolMaster$_fun_get_draw_address($period);
    return res;
}

_ %owner() method_id(83229) {
    var self = $PoolMaster$_contract_load();
    var res = self~$PoolMaster$_fun_owner();
    return res;
}

_ supported_interfaces() method_id {
    return (
        "org.ton.introspection.v0"H >> 128,
        "org.ton.abi.ipfs.v0"H >> 128,
        "org.ton.deploy.lazy.v0"H >> 128,
        "org.ton.debug.v0"H >> 128,
        "org.ton.chain.workchain.v0"H >> 128,
        "org.ton.ownable.transferable.v2"H >> 128,
        "org.ton.ownable"H >> 128
    );
}

_ get_abi_ipfs() method_id {
    return "ipfs://QmX3GHX1emwnb3Vh1MLLYKC768tSznYqKwHt4PFS5P381p";
}

_ lazy_deployment_completed() method_id {
    return get_data().begin_parse().load_int(1);
}

;;
;; Routing of a Contract PoolMaster
;;

((slice, (int, int), int, int, int, int), int) $PoolMaster$_contract_router_internal((slice, (int, int), int, int, int, int) self, int msg_bounced, slice in_msg) impure inline_ref {
    ;; Handle bounced messages
    if (msg_bounced) {
        return (self, true);
    }
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    
    ;; Receive empty message
    if ((op == 0) & (slice_bits(in_msg) <= 32)) {
        self~%$PoolMaster$_internal_empty();
        return (self, true);
    }
    
    ;; Receive DepositInternal message
    if (op == 2706550035) {
        var msg = in_msg~$DepositInternal$_load();
        self~$PoolMaster$_internal_binary_DepositInternal(msg);
        return (self, true);
    }
    
    ;; Receive WithdrawInternal message
    if (op == 4279924659) {
        var msg = in_msg~$WithdrawInternal$_load();
        self~$PoolMaster$_internal_binary_WithdrawInternal(msg);
        return (self, true);
    }
    
    ;; Receive Borrow message
    if (op == 1154673471) {
        var msg = in_msg~$Borrow$_load();
        self~$PoolMaster$_internal_binary_Borrow(msg);
        return (self, true);
    }
    
    ;; Receive ChangeOwner message
    if (op == 2174598809) {
        var msg = in_msg~$ChangeOwner$_load();
        self~$PoolMaster$_internal_binary_ChangeOwner(msg);
        return (self, true);
    }
    
    ;; Receive Deploy message
    if (op == 2490013878) {
        var msg = in_msg~$Deploy$_load();
        self~$PoolMaster$_internal_binary_Deploy(msg);
        return (self, true);
    }
    
    ;; Text Receivers
    if (op == 0) {
        var text_op = slice_hash(in_msg);
        
        ;; Receive "init draw" message
        if (text_op == 0x8b88a4c05aa285f6109e02ad26f6a96999f061987f3790b9484fc0566d9331a2) {
            self~$PoolMaster$_internal_text_8b88a4c05aa285f6109e02ad26f6a96999f061987f3790b9484fc0566d9331a2();
            return (self, true);
        }
        
        ;; Receive "open draw" message
        if (text_op == 0x104348ebcd6b61d2dfe8922e378059a8807e35b84a8b54b66e554ea818a5b66e) {
            self~$PoolMaster$_internal_text_104348ebcd6b61d2dfe8922e378059a8807e35b84a8b54b66e554ea818a5b66e();
            return (self, true);
        }
    }
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = -(msg_flags & 1);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = $PoolMaster$_contract_load();
    
    ;; Handle operation
    int handled = self~$PoolMaster$_contract_router_internal(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(130, handled);
    
    ;; Persist state
    $PoolMaster$_contract_store(self);
}
