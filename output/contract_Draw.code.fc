#pragma version =0.4.3;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

#include "contract_Draw.headers.fc";
#include "contract_Draw.stdlib.fc";
#include "contract_Draw.storage.fc";

;;
;; Contract Draw functions
;;

(int, slice, slice, int, tuple, tuple, int, int, int, int, int, int, int, int, int) $Draw$_contract_init(slice $pool_master, slice $prize_reserve, int $period) impure inline_ref {
    var (($self'active, $self'pool_master, $self'prize_reserve, $self'period, $self'start, $self'end, $self'prize_amount, $self'avail_prize_amount, $self'winning_number, $self'deadline, $self'prize_percentage_0, $self'prize_percentage_1, $self'prize_percentage_2, $self'prize_percentage_3, $self'prize_percentage_4)) = (false, null(), null(), 0, null(), null(), 0, 0, 0, 0, null(), null(), null(), null(), null());
    $self'pool_master = $pool_master;
    $self'prize_reserve = $prize_reserve;
    $self'period = $period;
    $self'prize_percentage_0 = 100;
    $self'prize_percentage_1 = 300;
    $self'prize_percentage_2 = 800;
    $self'prize_percentage_3 = 2300;
    $self'prize_percentage_4 = 6500;
    return ($self'active, $self'pool_master, $self'prize_reserve, $self'period, $self'start, $self'end, $self'prize_amount, $self'avail_prize_amount, $self'winning_number, $self'deadline, $self'prize_percentage_0, $self'prize_percentage_1, $self'prize_percentage_2, $self'prize_percentage_3, $self'prize_percentage_4);
}

int $global_average_balance((int, int) $start, (int, int) $end) impure inline {
    var (($start'timestamp, $start'amount)) = $start;
    var (($end'timestamp, $end'amount)) = $end;
    throw_unless(31206, ($start'timestamp < $end'timestamp));
    return (($end'amount - $start'amount) / ($end'timestamp - $start'timestamp));
}

((int, slice, slice, int, tuple, tuple, int, int, int, int, int, int, int, int, int), (cell, cell)) $Draw$_fun__get_ticket_init((int, slice, slice, int, tuple, tuple, int, int, int, int, int, int, int, int, int) $self, slice $user, slice $pool_account) impure inline {
    var (($self'active, $self'pool_master, $self'prize_reserve, $self'period, $self'start, $self'end, $self'prize_amount, $self'avail_prize_amount, $self'winning_number, $self'deadline, $self'prize_percentage_0, $self'prize_percentage_1, $self'prize_percentage_2, $self'prize_percentage_3, $self'prize_percentage_4)) = $self;
    return (($self'active, $self'pool_master, $self'prize_reserve, $self'period, $self'start, $self'end, $self'prize_amount, $self'avail_prize_amount, $self'winning_number, $self'deadline, $self'prize_percentage_0, $self'prize_percentage_1, $self'prize_percentage_2, $self'prize_percentage_3, $self'prize_percentage_4), $Ticket$_init_child(__tact_context_sys, $user, $pool_account, my_address(), $self'period));
}

((int, slice, slice, int, tuple, tuple, int, int, int, int, int, int, int, int, int), (int, slice, slice, int, tuple, tuple, int, int, int, int, int, int, int, int, int)) $Draw$_fun_get_core_data((int, slice, slice, int, tuple, tuple, int, int, int, int, int, int, int, int, int) $self) impure inline {
    var (($self'active, $self'pool_master, $self'prize_reserve, $self'period, $self'start, $self'end, $self'prize_amount, $self'avail_prize_amount, $self'winning_number, $self'deadline, $self'prize_percentage_0, $self'prize_percentage_1, $self'prize_percentage_2, $self'prize_percentage_3, $self'prize_percentage_4)) = $self;
    return (($self'active, $self'pool_master, $self'prize_reserve, $self'period, $self'start, $self'end, $self'prize_amount, $self'avail_prize_amount, $self'winning_number, $self'deadline, $self'prize_percentage_0, $self'prize_percentage_1, $self'prize_percentage_2, $self'prize_percentage_3, $self'prize_percentage_4), $DrawData$_constructor_active_pool_master_prize_reserve_period_start_end_prize_amount_avail_prize_amount_winning_number_deadline_prize_percentage_0_prize_percentage_1_prize_percentage_2_prize_percentage_3_prize_percentage_4($self'active, $self'pool_master, $self'prize_reserve, $self'period, $self'start, $self'end, $self'prize_amount, $self'avail_prize_amount, $self'winning_number, $self'deadline, $self'prize_percentage_0, $self'prize_percentage_1, $self'prize_percentage_2, $self'prize_percentage_3, $self'prize_percentage_4));
}

((int, slice, slice, int, tuple, tuple, int, int, int, int, int, int, int, int, int), int) $Draw$_fun_prize_amount_per_pick((int, slice, slice, int, tuple, tuple, int, int, int, int, int, int, int, int, int) $self, int $tier) impure inline {
    var (($self'active, $self'pool_master, $self'prize_reserve, $self'period, $self'start, $self'end, $self'prize_amount, $self'avail_prize_amount, $self'winning_number, $self'deadline, $self'prize_percentage_0, $self'prize_percentage_1, $self'prize_percentage_2, $self'prize_percentage_3, $self'prize_percentage_4)) = $self;
    if (($tier == 0)) {
        return (($self'active, $self'pool_master, $self'prize_reserve, $self'period, $self'start, $self'end, $self'prize_amount, $self'avail_prize_amount, $self'winning_number, $self'deadline, $self'prize_percentage_0, $self'prize_percentage_1, $self'prize_percentage_2, $self'prize_percentage_3, $self'prize_percentage_4), (($self'prize_amount * $self'prize_percentage_0) / 10000));
    } elseif (($tier == 1)) {
        return (($self'active, $self'pool_master, $self'prize_reserve, $self'period, $self'start, $self'end, $self'prize_amount, $self'avail_prize_amount, $self'winning_number, $self'deadline, $self'prize_percentage_0, $self'prize_percentage_1, $self'prize_percentage_2, $self'prize_percentage_3, $self'prize_percentage_4), (($self'prize_amount * $self'prize_percentage_1) / 150000));
    } elseif (($tier == 2)) {
        return (($self'active, $self'pool_master, $self'prize_reserve, $self'period, $self'start, $self'end, $self'prize_amount, $self'avail_prize_amount, $self'winning_number, $self'deadline, $self'prize_percentage_0, $self'prize_percentage_1, $self'prize_percentage_2, $self'prize_percentage_3, $self'prize_percentage_4), (($self'prize_amount * $self'prize_percentage_2) / 2400000));
    } elseif (($tier == 3)) {
        return (($self'active, $self'pool_master, $self'prize_reserve, $self'period, $self'start, $self'end, $self'prize_amount, $self'avail_prize_amount, $self'winning_number, $self'deadline, $self'prize_percentage_0, $self'prize_percentage_1, $self'prize_percentage_2, $self'prize_percentage_3, $self'prize_percentage_4), (($self'prize_amount * $self'prize_percentage_3) / 38400000));
    } elseif (($tier == 4)) {
        return (($self'active, $self'pool_master, $self'prize_reserve, $self'period, $self'start, $self'end, $self'prize_amount, $self'avail_prize_amount, $self'winning_number, $self'deadline, $self'prize_percentage_0, $self'prize_percentage_1, $self'prize_percentage_2, $self'prize_percentage_3, $self'prize_percentage_4), (($self'prize_amount * $self'prize_percentage_4) / 614400000));
    } else {
        return (($self'active, $self'pool_master, $self'prize_reserve, $self'period, $self'start, $self'end, $self'prize_amount, $self'avail_prize_amount, $self'winning_number, $self'deadline, $self'prize_percentage_0, $self'prize_percentage_1, $self'prize_percentage_2, $self'prize_percentage_3, $self'prize_percentage_4), 0);
    }
}

((int, slice, slice, int, tuple, tuple, int, int, int, int, int, int, int, int, int), int) $Draw$_fun_compute_tier((int, slice, slice, int, tuple, tuple, int, int, int, int, int, int, int, int, int) $self, int $pick_number) impure inline {
    var (($self'active, $self'pool_master, $self'prize_reserve, $self'period, $self'start, $self'end, $self'prize_amount, $self'avail_prize_amount, $self'winning_number, $self'deadline, $self'prize_percentage_0, $self'prize_percentage_1, $self'prize_percentage_2, $self'prize_percentage_3, $self'prize_percentage_4)) = $self;
    int $winning_number = $self'winning_number;
    int $tier = 5;
    int $user_num = ($pick_number % 16);
    int $win_num = ($winning_number % 16);
    while (( (($user_num != $win_num)) ? (($tier > 0)) : (false) )) {
        $tier = ($tier - 1);
        $pick_number = ($pick_number / 16);
        $winning_number = ($winning_number / 16);
        $user_num = ($pick_number % 16);
        $win_num = ($winning_number % 16);
    }
    return (($self'active, $self'pool_master, $self'prize_reserve, $self'period, $self'start, $self'end, $self'prize_amount, $self'avail_prize_amount, $self'winning_number, $self'deadline, $self'prize_percentage_0, $self'prize_percentage_1, $self'prize_percentage_2, $self'prize_percentage_3, $self'prize_percentage_4), $tier);
}

((int, slice, slice, int, tuple, tuple, int, int, int, int, int, int, int, int, int), int) $Draw$_fun_compute_prize_amount((int, slice, slice, int, tuple, tuple, int, int, int, int, int, int, int, int, int) $self, slice $pick_payload) impure inline {
    var (($self'active, $self'pool_master, $self'prize_reserve, $self'period, $self'start, $self'end, $self'prize_amount, $self'avail_prize_amount, $self'winning_number, $self'deadline, $self'prize_percentage_0, $self'prize_percentage_1, $self'prize_percentage_2, $self'prize_percentage_3, $self'prize_percentage_4)) = $self;
    int $prize_amount = 0;
    int $size = (slice_bits($pick_payload) / 20);
    repeat ($size) {
        int $pick_number = $pick_payload~load_uint(20);
        int $tier = ($self'active, $self'pool_master, $self'prize_reserve, $self'period, $self'start, $self'end, $self'prize_amount, $self'avail_prize_amount, $self'winning_number, $self'deadline, $self'prize_percentage_0, $self'prize_percentage_1, $self'prize_percentage_2, $self'prize_percentage_3, $self'prize_percentage_4)~$Draw$_fun_compute_tier($pick_number);
        int $amount = ($self'active, $self'pool_master, $self'prize_reserve, $self'period, $self'start, $self'end, $self'prize_amount, $self'avail_prize_amount, $self'winning_number, $self'deadline, $self'prize_percentage_0, $self'prize_percentage_1, $self'prize_percentage_2, $self'prize_percentage_3, $self'prize_percentage_4)~$Draw$_fun_prize_amount_per_pick($tier);
        $prize_amount = ($prize_amount + $amount);
    }
    return (($self'active, $self'pool_master, $self'prize_reserve, $self'period, $self'start, $self'end, $self'prize_amount, $self'avail_prize_amount, $self'winning_number, $self'deadline, $self'prize_percentage_0, $self'prize_percentage_1, $self'prize_percentage_2, $self'prize_percentage_3, $self'prize_percentage_4), $prize_amount);
}

((int, slice, slice, int, tuple, tuple, int, int, int, int, int, int, int, int, int), slice) $Draw$_fun__get_ticket_address((int, slice, slice, int, tuple, tuple, int, int, int, int, int, int, int, int, int) $self, slice $user, slice $pool_account) impure inline {
    var (($self'active, $self'pool_master, $self'prize_reserve, $self'period, $self'start, $self'end, $self'prize_amount, $self'avail_prize_amount, $self'winning_number, $self'deadline, $self'prize_percentage_0, $self'prize_percentage_1, $self'prize_percentage_2, $self'prize_percentage_3, $self'prize_percentage_4)) = $self;
    var ($sinit'code, $sinit'data) = ($self'active, $self'pool_master, $self'prize_reserve, $self'period, $self'start, $self'end, $self'prize_amount, $self'avail_prize_amount, $self'winning_number, $self'deadline, $self'prize_percentage_0, $self'prize_percentage_1, $self'prize_percentage_2, $self'prize_percentage_3, $self'prize_percentage_4)~$Draw$_fun__get_ticket_init($user, $pool_account);
    return (($self'active, $self'pool_master, $self'prize_reserve, $self'period, $self'start, $self'end, $self'prize_amount, $self'avail_prize_amount, $self'winning_number, $self'deadline, $self'prize_percentage_0, $self'prize_percentage_1, $self'prize_percentage_2, $self'prize_percentage_3, $self'prize_percentage_4), $global_contractAddress(($sinit'code, $sinit'data)));
}

((int, slice, slice, int, tuple, tuple, int, int, int, int, int, int, int, int, int), ()) $Draw$_fun_require_ticket((int, slice, slice, int, tuple, tuple, int, int, int, int, int, int, int, int, int) $self, slice $user, slice $pool_account) impure inline {
    var (($self'active, $self'pool_master, $self'prize_reserve, $self'period, $self'start, $self'end, $self'prize_amount, $self'avail_prize_amount, $self'winning_number, $self'deadline, $self'prize_percentage_0, $self'prize_percentage_1, $self'prize_percentage_2, $self'prize_percentage_3, $self'prize_percentage_4)) = $self;
    throw_unless(4429, ( __tact_slice_eq_bits(($self'active, $self'pool_master, $self'prize_reserve, $self'period, $self'start, $self'end, $self'prize_amount, $self'avail_prize_amount, $self'winning_number, $self'deadline, $self'prize_percentage_0, $self'prize_percentage_1, $self'prize_percentage_2, $self'prize_percentage_3, $self'prize_percentage_4)~$Draw$_fun__get_ticket_address($user, $pool_account), __tact_context_get_sender()) ));
    return (($self'active, $self'pool_master, $self'prize_reserve, $self'period, $self'start, $self'end, $self'prize_amount, $self'avail_prize_amount, $self'winning_number, $self'deadline, $self'prize_percentage_0, $self'prize_percentage_1, $self'prize_percentage_2, $self'prize_percentage_3, $self'prize_percentage_4), ());
}

((int, slice, slice, int, tuple, tuple, int, int, int, int, int, int, int, int, int), ()) $Draw$_fun_require_not_over((int, slice, slice, int, tuple, tuple, int, int, int, int, int, int, int, int, int) $self) impure inline {
    var (($self'active, $self'pool_master, $self'prize_reserve, $self'period, $self'start, $self'end, $self'prize_amount, $self'avail_prize_amount, $self'winning_number, $self'deadline, $self'prize_percentage_0, $self'prize_percentage_1, $self'prize_percentage_2, $self'prize_percentage_3, $self'prize_percentage_4)) = $self;
    throw_unless(47849, (now() < $self'deadline));
    return (($self'active, $self'pool_master, $self'prize_reserve, $self'period, $self'start, $self'end, $self'prize_amount, $self'avail_prize_amount, $self'winning_number, $self'deadline, $self'prize_percentage_0, $self'prize_percentage_1, $self'prize_percentage_2, $self'prize_percentage_3, $self'prize_percentage_4), ());
}

((int, slice, slice, int, tuple, tuple, int, int, int, int, int, int, int, int, int), ()) $Draw$_fun_native_reserve((int, slice, slice, int, tuple, tuple, int, int, int, int, int, int, int, int, int) $self) impure inline {
    var (($self'active, $self'pool_master, $self'prize_reserve, $self'period, $self'start, $self'end, $self'prize_amount, $self'avail_prize_amount, $self'winning_number, $self'deadline, $self'prize_percentage_0, $self'prize_percentage_1, $self'prize_percentage_2, $self'prize_percentage_3, $self'prize_percentage_4)) = $self;
    raw_reserve(($self'avail_prize_amount + 100000000), 0);
    return (($self'active, $self'pool_master, $self'prize_reserve, $self'period, $self'start, $self'end, $self'prize_amount, $self'avail_prize_amount, $self'winning_number, $self'deadline, $self'prize_percentage_0, $self'prize_percentage_1, $self'prize_percentage_2, $self'prize_percentage_3, $self'prize_percentage_4), ());
}

((int, slice, slice, int, tuple, tuple, int, int, int, int, int, int, int, int, int), ()) $Draw$_fun_require_active((int, slice, slice, int, tuple, tuple, int, int, int, int, int, int, int, int, int) $self) impure inline {
    var (($self'active, $self'pool_master, $self'prize_reserve, $self'period, $self'start, $self'end, $self'prize_amount, $self'avail_prize_amount, $self'winning_number, $self'deadline, $self'prize_percentage_0, $self'prize_percentage_1, $self'prize_percentage_2, $self'prize_percentage_3, $self'prize_percentage_4)) = $self;
    throw_unless(54665, $self'active);
    return (($self'active, $self'pool_master, $self'prize_reserve, $self'period, $self'start, $self'end, $self'prize_amount, $self'avail_prize_amount, $self'winning_number, $self'deadline, $self'prize_percentage_0, $self'prize_percentage_1, $self'prize_percentage_2, $self'prize_percentage_3, $self'prize_percentage_4), ());
}

((int, slice, slice, int, tuple, tuple, int, int, int, int, int, int, int, int, int), ()) $Draw$_fun_require_over((int, slice, slice, int, tuple, tuple, int, int, int, int, int, int, int, int, int) $self) impure inline {
    var (($self'active, $self'pool_master, $self'prize_reserve, $self'period, $self'start, $self'end, $self'prize_amount, $self'avail_prize_amount, $self'winning_number, $self'deadline, $self'prize_percentage_0, $self'prize_percentage_1, $self'prize_percentage_2, $self'prize_percentage_3, $self'prize_percentage_4)) = $self;
    throw_unless(6571, (now() >= $self'deadline));
    return (($self'active, $self'pool_master, $self'prize_reserve, $self'period, $self'start, $self'end, $self'prize_amount, $self'avail_prize_amount, $self'winning_number, $self'deadline, $self'prize_percentage_0, $self'prize_percentage_1, $self'prize_percentage_2, $self'prize_percentage_3, $self'prize_percentage_4), ());
}

((int, slice, slice, int, tuple, tuple, int, int, int, int, int, int, int, int, int), ()) $Draw$_fun_require_pool_master((int, slice, slice, int, tuple, tuple, int, int, int, int, int, int, int, int, int) $self) impure inline {
    var (($self'active, $self'pool_master, $self'prize_reserve, $self'period, $self'start, $self'end, $self'prize_amount, $self'avail_prize_amount, $self'winning_number, $self'deadline, $self'prize_percentage_0, $self'prize_percentage_1, $self'prize_percentage_2, $self'prize_percentage_3, $self'prize_percentage_4)) = $self;
    throw_unless(24632, ( __tact_slice_eq_bits($self'pool_master, __tact_context_get_sender()) ));
    return (($self'active, $self'pool_master, $self'prize_reserve, $self'period, $self'start, $self'end, $self'prize_amount, $self'avail_prize_amount, $self'winning_number, $self'deadline, $self'prize_percentage_0, $self'prize_percentage_1, $self'prize_percentage_2, $self'prize_percentage_3, $self'prize_percentage_4), ());
}

;;
;; Receivers of a Contract Draw
;;

(((int, slice, slice, int, tuple, tuple, int, int, int, int, int, int, int, int, int)), ()) $Draw$_internal_binary_ClaimPrizeInternal((int, slice, slice, int, tuple, tuple, int, int, int, int, int, int, int, int, int) $self, (slice, slice, slice) $msg) impure inline {
    var ($self'active, $self'pool_master, $self'prize_reserve, $self'period, $self'start, $self'end, $self'prize_amount, $self'avail_prize_amount, $self'winning_number, $self'deadline, $self'prize_percentage_0, $self'prize_percentage_1, $self'prize_percentage_2, $self'prize_percentage_3, $self'prize_percentage_4) = $self;
    var ($msg'user, $msg'pool_account, $msg'pick_payload) = $msg;
    ($self'active, $self'pool_master, $self'prize_reserve, $self'period, $self'start, $self'end, $self'prize_amount, $self'avail_prize_amount, $self'winning_number, $self'deadline, $self'prize_percentage_0, $self'prize_percentage_1, $self'prize_percentage_2, $self'prize_percentage_3, $self'prize_percentage_4)~$Draw$_fun_require_active();
    ($self'active, $self'pool_master, $self'prize_reserve, $self'period, $self'start, $self'end, $self'prize_amount, $self'avail_prize_amount, $self'winning_number, $self'deadline, $self'prize_percentage_0, $self'prize_percentage_1, $self'prize_percentage_2, $self'prize_percentage_3, $self'prize_percentage_4)~$Draw$_fun_require_not_over();
    ($self'active, $self'pool_master, $self'prize_reserve, $self'period, $self'start, $self'end, $self'prize_amount, $self'avail_prize_amount, $self'winning_number, $self'deadline, $self'prize_percentage_0, $self'prize_percentage_1, $self'prize_percentage_2, $self'prize_percentage_3, $self'prize_percentage_4)~$Draw$_fun_require_ticket($msg'user, $msg'pool_account);
    int $prize_amount = 0;
    repeat (4) {
        slice $pick_payload = begin_parse($msg'pick_payload~load_ref());
        int $amount = ($self'active, $self'pool_master, $self'prize_reserve, $self'period, $self'start, $self'end, $self'prize_amount, $self'avail_prize_amount, $self'winning_number, $self'deadline, $self'prize_percentage_0, $self'prize_percentage_1, $self'prize_percentage_2, $self'prize_percentage_3, $self'prize_percentage_4)~$Draw$_fun_compute_prize_amount($pick_payload);
        $prize_amount = ($prize_amount + $amount);
    }
    int $pay_amount = min($prize_amount, $self'avail_prize_amount);
    int $debt_amount = ($prize_amount - $pay_amount);
    $self'avail_prize_amount = ($self'avail_prize_amount - $pay_amount);
    ($self'active, $self'pool_master, $self'prize_reserve, $self'period, $self'start, $self'end, $self'prize_amount, $self'avail_prize_amount, $self'winning_number, $self'deadline, $self'prize_percentage_0, $self'prize_percentage_1, $self'prize_percentage_2, $self'prize_percentage_3, $self'prize_percentage_4)~$Draw$_fun_native_reserve();
    if (($prize_amount > 0)) {
        if (($debt_amount > 0)) {
            $global_send($SendParameters$_constructor_bounce_to_value_mode(false, $msg'user, $pay_amount, (1 + 2)));
            $global_send($SendParameters$_constructor_bounce_to_value_mode_body(false, __tact_context_get_sender(), 0, (128 + 2), $PayPrizeDebtInternal$_store_cell($PayPrizeDebtInternal$_constructor_user_amount($msg'user, $debt_amount))));
            return (($self'active, $self'pool_master, $self'prize_reserve, $self'period, $self'start, $self'end, $self'prize_amount, $self'avail_prize_amount, $self'winning_number, $self'deadline, $self'prize_percentage_0, $self'prize_percentage_1, $self'prize_percentage_2, $self'prize_percentage_3, $self'prize_percentage_4), ());
        }
    }
    $global_send($SendParameters$_constructor_bounce_to_value_mode(false, $msg'user, 0, (128 + 2)));
    return (($self'active, $self'pool_master, $self'prize_reserve, $self'period, $self'start, $self'end, $self'prize_amount, $self'avail_prize_amount, $self'winning_number, $self'deadline, $self'prize_percentage_0, $self'prize_percentage_1, $self'prize_percentage_2, $self'prize_percentage_3, $self'prize_percentage_4), ());
}

((int, slice, slice, int, tuple, tuple, int, int, int, int, int, int, int, int, int), ()) $Draw$_internal_text_22eaa037e87e6cf8bf9be7426929531aaa3cb9eedd0b22580427438ad19043f0((int, slice, slice, int, tuple, tuple, int, int, int, int, int, int, int, int, int) $self) impure inline {
    var ($self'active, $self'pool_master, $self'prize_reserve, $self'period, $self'start, $self'end, $self'prize_amount, $self'avail_prize_amount, $self'winning_number, $self'deadline, $self'prize_percentage_0, $self'prize_percentage_1, $self'prize_percentage_2, $self'prize_percentage_3, $self'prize_percentage_4) = $self;
    ($self'active, $self'pool_master, $self'prize_reserve, $self'period, $self'start, $self'end, $self'prize_amount, $self'avail_prize_amount, $self'winning_number, $self'deadline, $self'prize_percentage_0, $self'prize_percentage_1, $self'prize_percentage_2, $self'prize_percentage_3, $self'prize_percentage_4)~$Draw$_fun_require_active();
    ($self'active, $self'pool_master, $self'prize_reserve, $self'period, $self'start, $self'end, $self'prize_amount, $self'avail_prize_amount, $self'winning_number, $self'deadline, $self'prize_percentage_0, $self'prize_percentage_1, $self'prize_percentage_2, $self'prize_percentage_3, $self'prize_percentage_4)~$Draw$_fun_require_over();
    $self'avail_prize_amount = 0;
    ($self'active, $self'pool_master, $self'prize_reserve, $self'period, $self'start, $self'end, $self'prize_amount, $self'avail_prize_amount, $self'winning_number, $self'deadline, $self'prize_percentage_0, $self'prize_percentage_1, $self'prize_percentage_2, $self'prize_percentage_3, $self'prize_percentage_4)~$Draw$_fun_native_reserve();
    $global_send($SendParameters$_constructor_bounce_to_value_mode(false, $self'prize_reserve, 0, 128));
    return (($self'active, $self'pool_master, $self'prize_reserve, $self'period, $self'start, $self'end, $self'prize_amount, $self'avail_prize_amount, $self'winning_number, $self'deadline, $self'prize_percentage_0, $self'prize_percentage_1, $self'prize_percentage_2, $self'prize_percentage_3, $self'prize_percentage_4), ());
}

(((int, slice, slice, int, tuple, tuple, int, int, int, int, int, int, int, int, int)), ()) $Draw$_internal_binary_InitDraw((int, slice, slice, int, tuple, tuple, int, int, int, int, int, int, int, int, int) $self, (int, int, slice) $msg) impure inline {
    var ($self'active, $self'pool_master, $self'prize_reserve, $self'period, $self'start, $self'end, $self'prize_amount, $self'avail_prize_amount, $self'winning_number, $self'deadline, $self'prize_percentage_0, $self'prize_percentage_1, $self'prize_percentage_2, $self'prize_percentage_3, $self'prize_percentage_4) = $self;
    var ($msg'twab_timestamp, $msg'twab_amount, $msg'refund_address) = $msg;
    ($self'active, $self'pool_master, $self'prize_reserve, $self'period, $self'start, $self'end, $self'prize_amount, $self'avail_prize_amount, $self'winning_number, $self'deadline, $self'prize_percentage_0, $self'prize_percentage_1, $self'prize_percentage_2, $self'prize_percentage_3, $self'prize_percentage_4)~$Draw$_fun_require_pool_master();
    $self'start = $Twab$_as_optional($Twab$_constructor_timestamp_amount($msg'twab_timestamp, $msg'twab_amount));
    ($self'active, $self'pool_master, $self'prize_reserve, $self'period, $self'start, $self'end, $self'prize_amount, $self'avail_prize_amount, $self'winning_number, $self'deadline, $self'prize_percentage_0, $self'prize_percentage_1, $self'prize_percentage_2, $self'prize_percentage_3, $self'prize_percentage_4)~$Draw$_fun_forward($msg'refund_address, null(), false, null());
    return (($self'active, $self'pool_master, $self'prize_reserve, $self'period, $self'start, $self'end, $self'prize_amount, $self'avail_prize_amount, $self'winning_number, $self'deadline, $self'prize_percentage_0, $self'prize_percentage_1, $self'prize_percentage_2, $self'prize_percentage_3, $self'prize_percentage_4), ());
}

(((int, slice, slice, int, tuple, tuple, int, int, int, int, int, int, int, int, int)), ()) $Draw$_internal_binary_OpenDraw((int, slice, slice, int, tuple, tuple, int, int, int, int, int, int, int, int, int) $self, (int, int, int, slice) $msg) impure inline {
    var ($self'active, $self'pool_master, $self'prize_reserve, $self'period, $self'start, $self'end, $self'prize_amount, $self'avail_prize_amount, $self'winning_number, $self'deadline, $self'prize_percentage_0, $self'prize_percentage_1, $self'prize_percentage_2, $self'prize_percentage_3, $self'prize_percentage_4) = $self;
    var ($msg'twab_timestamp, $msg'twab_amount, $msg'prize_amount, $msg'refund_address) = $msg;
    ($self'active, $self'pool_master, $self'prize_reserve, $self'period, $self'start, $self'end, $self'prize_amount, $self'avail_prize_amount, $self'winning_number, $self'deadline, $self'prize_percentage_0, $self'prize_percentage_1, $self'prize_percentage_2, $self'prize_percentage_3, $self'prize_percentage_4)~$Draw$_fun_require_pool_master();
    throw_unless(8459, ($msg'twab_timestamp > $Twab$_get_timestamp($Twab$_not_null($self'start))));
    $self'active = true;
    $self'end = $Twab$_as_optional($Twab$_constructor_timestamp_amount($msg'twab_timestamp, $msg'twab_amount));
    $self'prize_amount = $msg'prize_amount;
    $self'avail_prize_amount = $msg'prize_amount;
    $self'winning_number = ($global_randomInt() % 1048576);
    $self'deadline = (now() + 1209600);
    ($self'active, $self'pool_master, $self'prize_reserve, $self'period, $self'start, $self'end, $self'prize_amount, $self'avail_prize_amount, $self'winning_number, $self'deadline, $self'prize_percentage_0, $self'prize_percentage_1, $self'prize_percentage_2, $self'prize_percentage_3, $self'prize_percentage_4)~$Draw$_fun_native_reserve();
    $global_send($SendParameters$_constructor_bounce_to_value_mode(false, $msg'refund_address, 0, (128 + 2)));
    return (($self'active, $self'pool_master, $self'prize_reserve, $self'period, $self'start, $self'end, $self'prize_amount, $self'avail_prize_amount, $self'winning_number, $self'deadline, $self'prize_percentage_0, $self'prize_percentage_1, $self'prize_percentage_2, $self'prize_percentage_3, $self'prize_percentage_4), ());
}

(((int, slice, slice, int, tuple, tuple, int, int, int, int, int, int, int, int, int)), ()) $Draw$_internal_binary_InitTicket((int, slice, slice, int, tuple, tuple, int, int, int, int, int, int, int, int, int) $self, (slice) $msg) impure inline {
    var ($self'active, $self'pool_master, $self'prize_reserve, $self'period, $self'start, $self'end, $self'prize_amount, $self'avail_prize_amount, $self'winning_number, $self'deadline, $self'prize_percentage_0, $self'prize_percentage_1, $self'prize_percentage_2, $self'prize_percentage_3, $self'prize_percentage_4) = $self;
    var ($msg'pool_account) = $msg;
    ($self'active, $self'pool_master, $self'prize_reserve, $self'period, $self'start, $self'end, $self'prize_amount, $self'avail_prize_amount, $self'winning_number, $self'deadline, $self'prize_percentage_0, $self'prize_percentage_1, $self'prize_percentage_2, $self'prize_percentage_3, $self'prize_percentage_4)~$Draw$_fun_require_active();
    var ($start'timestamp, $start'amount) = $Twab$_not_null($self'start);
    var ($end'timestamp, $end'amount) = $Twab$_not_null($self'end);
    int $avg_balance = $global_average_balance(($start'timestamp, $start'amount), ($end'timestamp, $end'amount));
    ($self'active, $self'pool_master, $self'prize_reserve, $self'period, $self'start, $self'end, $self'prize_amount, $self'avail_prize_amount, $self'winning_number, $self'deadline, $self'prize_percentage_0, $self'prize_percentage_1, $self'prize_percentage_2, $self'prize_percentage_3, $self'prize_percentage_4)~$Draw$_fun_forward($msg'pool_account, $PrepareInitTicket$_store_cell($PrepareInitTicket$_constructor_period_start_end_avg_balance($self'period, $start'timestamp, $end'timestamp, $avg_balance)), false, null());
    return (($self'active, $self'pool_master, $self'prize_reserve, $self'period, $self'start, $self'end, $self'prize_amount, $self'avail_prize_amount, $self'winning_number, $self'deadline, $self'prize_percentage_0, $self'prize_percentage_1, $self'prize_percentage_2, $self'prize_percentage_3, $self'prize_percentage_4), ());
}

;;
;; Get methods of a Contract Draw
;;

_ %get_core_data() method_id(119856) {
    var self = $Draw$_contract_load();
    var res = self~$Draw$_fun_get_core_data();
    return $DrawData$_to_external(res);
}

_ supported_interfaces() method_id {
    return (
        "org.ton.introspection.v0"H >> 128,
        "org.ton.abi.ipfs.v0"H >> 128,
        "org.ton.deploy.lazy.v0"H >> 128,
        "org.ton.chain.workchain.v0"H >> 128
    );
}

_ get_abi_ipfs() method_id {
    return "ipfs://QmS6bfecByqU7Ryp43AHcDU1oG6fc6bBsNGNFjsqTnjxds";
}

_ lazy_deployment_completed() method_id {
    return get_data().begin_parse().load_int(1);
}

;;
;; Routing of a Contract Draw
;;

((int, slice, slice, int, tuple, tuple, int, int, int, int, int, int, int, int, int), int) $Draw$_contract_router_internal((int, slice, slice, int, tuple, tuple, int, int, int, int, int, int, int, int, int) self, int msg_bounced, slice in_msg) impure inline_ref {
    ;; Handle bounced messages
    if (msg_bounced) {
        return (self, true);
    }
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    
    ;; Receive ClaimPrizeInternal message
    if (op == 2865825699) {
        var msg = in_msg~$ClaimPrizeInternal$_load();
        self~$Draw$_internal_binary_ClaimPrizeInternal(msg);
        return (self, true);
    }
    
    ;; Receive InitDraw message
    if (op == 3109422989) {
        var msg = in_msg~$InitDraw$_load();
        self~$Draw$_internal_binary_InitDraw(msg);
        return (self, true);
    }
    
    ;; Receive OpenDraw message
    if (op == 3499440231) {
        var msg = in_msg~$OpenDraw$_load();
        self~$Draw$_internal_binary_OpenDraw(msg);
        return (self, true);
    }
    
    ;; Receive InitTicket message
    if (op == 2494876497) {
        var msg = in_msg~$InitTicket$_load();
        self~$Draw$_internal_binary_InitTicket(msg);
        return (self, true);
    }
    
    ;; Text Receivers
    if (op == 0) {
        var text_op = slice_hash(in_msg);
        
        ;; Receive "send to reserve" message
        if (text_op == 0x22eaa037e87e6cf8bf9be7426929531aaa3cb9eedd0b22580427438ad19043f0) {
            self~$Draw$_internal_text_22eaa037e87e6cf8bf9be7426929531aaa3cb9eedd0b22580427438ad19043f0();
            return (self, true);
        }
    }
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = -(msg_flags & 1);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = $Draw$_contract_load();
    
    ;; Handle operation
    int handled = self~$Draw$_contract_router_internal(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(130, handled);
    
    ;; Persist state
    $Draw$_contract_store(self);
}
