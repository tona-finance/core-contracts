;;
;; Header files for TicketTester
;; NOTE: declarations are sorted for optimal order
;;

;; __tact_verify_address
slice __tact_verify_address(slice address) inline;

;; __tact_load_address
(slice, slice) __tact_load_address(slice cs) inline;

;; __tact_store_address
builder __tact_store_address(builder b, slice address) inline;

;; __tact_my_balance
int __tact_my_balance() inline;

;; __tact_not_null
forall X -> X __tact_not_null(X x) inline;

;; __tact_context_get
(int, slice, int, slice) __tact_context_get() inline;

;; __tact_context_get_sender
slice __tact_context_get_sender() inline;

;; __tact_store_bool
builder __tact_store_bool(builder b, int v) inline;

;; __tact_dict_set_int_int
(cell, ()) __tact_dict_set_int_int(cell d, int kl, int k, int v, int vl) inline;

;; __tact_dict_get_int_int
int __tact_dict_get_int_int(cell d, int kl, int k, int vl) inline;

;; $Deploy$_load
(slice, ((int))) $Deploy$_load(slice sc_0) inline;

;; $DeployOk$_store
builder $DeployOk$_store(builder build_0, (int) v) inline;

;; $DeployOk$_store_cell
cell $DeployOk$_store_cell((int) v) inline;

;; $ComputePickNumber$_load
(slice, ((int, int))) $ComputePickNumber$_load(slice sc_0) inline;

;; $ComputePickPayload$_load
(slice, ((slice, slice))) $ComputePickPayload$_load(slice sc_0) inline;

;; $ComputePrizeAmount$_store
builder $ComputePrizeAmount$_store(builder build_0, (slice) v) inline;

;; $ComputePrizeAmount$_store_cell
cell $ComputePrizeAmount$_store_cell((slice) v) inline;

;; $TicketTester$_store
builder $TicketTester$_store(builder build_0, (slice, int, cell) v) inline;

;; $TicketTester$_load
(slice, ((slice, int, cell))) $TicketTester$_load(slice sc_0) inline;

;; $StateInit$_not_null
((cell, cell)) $StateInit$_not_null(tuple v) inline;

;; $TicketTester$init$_load
(slice, ((slice, int))) $TicketTester$init$_load(slice sc_0) inline;

;; $TicketTester$_contract_init
(slice, int, cell) $TicketTester$_contract_init(slice $owner, int $size) impure inline_ref;

;; $TicketTester$_contract_load
(slice, int, cell) $TicketTester$_contract_load() impure inline_ref;

;; $TicketTester$_contract_store
() $TicketTester$_contract_store((slice, int, cell) v) impure inline;

;; $global_send
() $global_send((int, slice, int, int, cell, cell, cell) $params) impure inline;

;; $Builder$_fun_asSlice
slice $Builder$_fun_asSlice(builder $self) impure inline;

;; $TicketTester$_fun_compute_pick_number
((slice, int, cell), int) $TicketTester$_fun_compute_pick_number((slice, int, cell) $self, int $index) impure inline;

;; $TicketTester$_fun_compute_pick_payload
((slice, int, cell), cell) $TicketTester$_fun_compute_pick_payload((slice, int, cell) $self, slice $index_payload) impure inline;

;; $SendParameters$_constructor_bounce_to_value_mode_body_code_data
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int bounce, slice to, int value, int mode, cell body, cell code, cell data) inline;

;; $TicketTester$_fun_forward
((slice, int, cell), ()) $TicketTester$_fun_forward((slice, int, cell) $self, slice $to, cell $body, int $bounce, tuple $init) impure inline;

;; $TicketTester$_fun_notify
((slice, int, cell), ()) $TicketTester$_fun_notify((slice, int, cell) $self, cell $body) impure inline;

;; $ComputePrizeAmount$_constructor_pick_payload
((slice)) $ComputePrizeAmount$_constructor_pick_payload(slice pick_payload) inline;

;; $DeployOk$_constructor_queryId
((int)) $DeployOk$_constructor_queryId(int queryId) inline;
