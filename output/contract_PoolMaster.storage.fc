;;
;; Type: StateInit
;; TLB: _ code:^cell data:^cell = StateInit
;;

((cell, cell)) $StateInit$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (cell vvv'code, cell vvv'data) = __tact_tuple_destroy_2(v);
    return (vvv'code, vvv'data);
}

tuple $StateInit$_as_optional((cell, cell) v) inline {
    var (v'code, v'data) = v;
    return __tact_tuple_create_2(v'code, v'data);
}

;;
;; Type: Context
;; TLB: _ bounced:bool sender:address value:int257 raw:^slice = Context
;;

_ $Context$_get_value((int, slice, int, slice) v) inline {
    var (v'bounced, v'sender, v'value, v'raw) = v;
    return v'value;
}

;;
;; Type: SendParameters
;; TLB: _ bounce:bool to:address value:int257 mode:int257 body:Maybe ^cell code:Maybe ^cell data:Maybe ^cell = SendParameters
;;

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int bounce, slice to, int value, int mode, cell body, cell code, cell data) inline {
    return (bounce, to, value, mode, body, code, data);
}

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode(int bounce, slice to, int value, int mode) inline {
    return (bounce, to, value, mode, null(), null(), null());
}

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body(int bounce, slice to, int value, int mode, cell body) inline {
    return (bounce, to, value, mode, body, null(), null());
}

;;
;; Type: Deploy
;; Header: 0x946a98b6
;; TLB: deploy#946a98b6 queryId:uint64 = Deploy
;;

(slice, ((int))) $Deploy$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2490013878);
    var v'queryId = sc_0~load_uint(64);
    return (sc_0, (v'queryId));
}

;;
;; Type: DeployOk
;; Header: 0xaff90f57
;; TLB: deploy_ok#aff90f57 queryId:uint64 = DeployOk
;;

builder $DeployOk$_store(builder build_0, (int) v) inline {
    var (v'queryId) = v;
    build_0 = store_uint(build_0, 2952335191, 32);
    build_0 = build_0.store_uint(v'queryId, 64);
    return build_0;
}

cell $DeployOk$_store_cell((int) v) inline {
    return $DeployOk$_store(begin_cell(), v).end_cell();
}

((int)) $DeployOk$_constructor_queryId(int queryId) inline {
    return (queryId);
}

;;
;; Type: Twab
;; TLB: _ timestamp:uint64 amount:uint128 = Twab
;;

builder $Twab$_store(builder build_0, (int, int) v) inline {
    var (v'timestamp, v'amount) = v;
    build_0 = build_0.store_uint(v'timestamp, 64);
    build_0 = build_0.store_uint(v'amount, 128);
    return build_0;
}

(slice, ((int, int))) $Twab$_load(slice sc_0) inline {
    var v'timestamp = sc_0~load_uint(64);
    var v'amount = sc_0~load_uint(128);
    return (sc_0, (v'timestamp, v'amount));
}

tuple $Twab$_to_tuple(((int, int)) v) inline {
    var (v'timestamp, v'amount) = v;
    return __tact_tuple_create_2(v'timestamp, v'amount);
}

((int, int)) $Twab$_constructor_timestamp_amount(int timestamp, int amount) inline {
    return (timestamp, amount);
}

;;
;; Type: Borrow
;; Header: 0x44d2eb3f
;; TLB: borrow#44d2eb3f amount:coins = Borrow
;;

(slice, ((int))) $Borrow$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 1154673471);
    var v'amount = sc_0~load_coins();
    return (sc_0, (v'amount));
}

;;
;; Type: Repay
;; Header: 0xcda0bc81
;; TLB: repay#cda0bc81 amount:coins = Repay
;;

(slice, ((int))) $Repay$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 3449863297);
    var v'amount = sc_0~load_coins();
    return (sc_0, (v'amount));
}

;;
;; Type: DepositInternal
;; Header: 0xa152ad13
;; TLB: deposit_internal#a152ad13 amount:coins user:address = DepositInternal
;;

(slice, ((int, slice))) $DepositInternal$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2706550035);
    var v'amount = sc_0~load_coins();
    var v'user = sc_0~__tact_load_address();
    return (sc_0, (v'amount, v'user));
}

;;
;; Type: WithdrawInternal
;; Header: 0xff1a77b3
;; TLB: withdraw_internal#ff1a77b3 amount:coins user:address = WithdrawInternal
;;

(slice, ((int, slice))) $WithdrawInternal$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 4279924659);
    var v'amount = sc_0~load_coins();
    var v'user = sc_0~__tact_load_address();
    return (sc_0, (v'amount, v'user));
}

;;
;; Type: DepositFinish
;; Header: 0xcff32eaa
;; TLB: deposit_finish#cff32eaa timestamp:uint64 amount:coins = DepositFinish
;;

builder $DepositFinish$_store(builder build_0, (int, int) v) inline {
    var (v'timestamp, v'amount) = v;
    build_0 = store_uint(build_0, 3488820906, 32);
    build_0 = build_0.store_uint(v'timestamp, 64);
    build_0 = build_0.store_coins(v'amount);
    return build_0;
}

cell $DepositFinish$_store_cell((int, int) v) inline {
    return $DepositFinish$_store(begin_cell(), v).end_cell();
}

((int, int)) $DepositFinish$_constructor_timestamp_amount(int timestamp, int amount) inline {
    return (timestamp, amount);
}

;;
;; Type: WithdrawFinish
;; Header: 0x1440585b
;; TLB: withdraw_finish#1440585b timestamp:uint64 amount:coins = WithdrawFinish
;;

builder $WithdrawFinish$_store(builder build_0, (int, int) v) inline {
    var (v'timestamp, v'amount) = v;
    build_0 = store_uint(build_0, 339761243, 32);
    build_0 = build_0.store_uint(v'timestamp, 64);
    build_0 = build_0.store_coins(v'amount);
    return build_0;
}

cell $WithdrawFinish$_store_cell((int, int) v) inline {
    return $WithdrawFinish$_store(begin_cell(), v).end_cell();
}

((int, int)) $WithdrawFinish$_constructor_timestamp_amount(int timestamp, int amount) inline {
    return (timestamp, amount);
}

;;
;; Type: InitDraw
;; Header: 0xb956078d
;; TLB: init_draw#b956078d twab_timestamp:uint64 twab_amount:uint128 refund_address:address = InitDraw
;;

builder $InitDraw$_store(builder build_0, (int, int, slice) v) inline {
    var (v'twab_timestamp, v'twab_amount, v'refund_address) = v;
    build_0 = store_uint(build_0, 3109422989, 32);
    build_0 = build_0.store_uint(v'twab_timestamp, 64);
    build_0 = build_0.store_uint(v'twab_amount, 128);
    build_0 = __tact_store_address(build_0, v'refund_address);
    return build_0;
}

cell $InitDraw$_store_cell((int, int, slice) v) inline {
    return $InitDraw$_store(begin_cell(), v).end_cell();
}

((int, int, slice)) $InitDraw$_constructor_twab_timestamp_twab_amount_refund_address(int twab_timestamp, int twab_amount, slice refund_address) inline {
    return (twab_timestamp, twab_amount, refund_address);
}

;;
;; Type: OpenDraw
;; Header: 0x7dc08bde
;; TLB: open_draw#7dc08bde twab_timestamp:uint64 twab_amount:uint128 refund_address:address = OpenDraw
;;

builder $OpenDraw$_store(builder build_0, (int, int, slice) v) inline {
    var (v'twab_timestamp, v'twab_amount, v'refund_address) = v;
    build_0 = store_uint(build_0, 2109770718, 32);
    build_0 = build_0.store_uint(v'twab_timestamp, 64);
    build_0 = build_0.store_uint(v'twab_amount, 128);
    build_0 = __tact_store_address(build_0, v'refund_address);
    return build_0;
}

cell $OpenDraw$_store_cell((int, int, slice) v) inline {
    return $OpenDraw$_store(begin_cell(), v).end_cell();
}

((int, int, slice)) $OpenDraw$_constructor_twab_timestamp_twab_amount_refund_address(int twab_timestamp, int twab_amount, slice refund_address) inline {
    return (twab_timestamp, twab_amount, refund_address);
}

;;
;; Type: PoolMasterData
;; TLB: _ owner:address prize_reserve:address twab:Twab{timestamp:uint64,amount:uint128} share_amount:coins borrow_amount:coins prize_amount:coins next_period:uint32 = PoolMasterData
;;

(slice, slice, tuple, int, int, int, int) $PoolMasterData$_to_external(((slice, slice, (int, int), int, int, int, int)) v) inline {
    var (v'owner, v'prize_reserve, v'twab, v'share_amount, v'borrow_amount, v'prize_amount, v'next_period) = v; 
    return (v'owner, v'prize_reserve, $Twab$_to_tuple(v'twab), v'share_amount, v'borrow_amount, v'prize_amount, v'next_period);
}

((slice, slice, (int, int), int, int, int, int)) $PoolMasterData$_constructor_owner_prize_reserve_twab_share_amount_borrow_amount_prize_amount_next_period(slice owner, slice prize_reserve, (int, int) twab, int share_amount, int borrow_amount, int prize_amount, int next_period) inline {
    return (owner, prize_reserve, twab, share_amount, borrow_amount, prize_amount, next_period);
}

;;
;; Type: ChangeOwner
;; Header: 0x819dbe99
;; TLB: change_owner#819dbe99 queryId:uint64 newOwner:address = ChangeOwner
;;

(slice, ((int, slice))) $ChangeOwner$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2174598809);
    var v'queryId = sc_0~load_uint(64);
    var v'newOwner = sc_0~__tact_load_address();
    return (sc_0, (v'queryId, v'newOwner));
}

;;
;; Type: ChangeOwnerOk
;; Header: 0x327b2b4a
;; TLB: change_owner_ok#327b2b4a queryId:uint64 newOwner:address = ChangeOwnerOk
;;

builder $ChangeOwnerOk$_store(builder build_0, (int, slice) v) inline {
    var (v'queryId, v'newOwner) = v;
    build_0 = store_uint(build_0, 846932810, 32);
    build_0 = build_0.store_uint(v'queryId, 64);
    build_0 = __tact_store_address(build_0, v'newOwner);
    return build_0;
}

cell $ChangeOwnerOk$_store_cell((int, slice) v) inline {
    return $ChangeOwnerOk$_store(begin_cell(), v).end_cell();
}

((int, slice)) $ChangeOwnerOk$_constructor_queryId_newOwner(int queryId, slice newOwner) inline {
    return (queryId, newOwner);
}

;;
;; Type: PoolMaster
;;

builder $PoolMaster$_store(builder build_0, (slice, (int, int), int, int, int, int) v) inline {
    var (v'owner, (v'twab'timestamp, v'twab'amount), v'share_amount, v'borrow_amount, v'prize_amount, v'next_period) = v;
    build_0 = __tact_store_address(build_0, v'owner);
    build_0 = $Twab$_store(build_0, (v'twab'timestamp, v'twab'amount));
    build_0 = build_0.store_coins(v'share_amount);
    build_0 = build_0.store_coins(v'borrow_amount);
    build_0 = build_0.store_coins(v'prize_amount);
    build_0 = build_0.store_uint(v'next_period, 32);
    return build_0;
}

(slice, ((slice, (int, int), int, int, int, int))) $PoolMaster$_load(slice sc_0) inline {
    var v'owner = sc_0~__tact_load_address();
    var v'twab = sc_0~$Twab$_load();
    var v'share_amount = sc_0~load_coins();
    var v'borrow_amount = sc_0~load_coins();
    var v'prize_amount = sc_0~load_coins();
    var v'next_period = sc_0~load_uint(32);
    return (sc_0, (v'owner, v'twab, v'share_amount, v'borrow_amount, v'prize_amount, v'next_period));
}

(slice, ((slice))) $PoolMaster$init$_load(slice sc_0) inline {
    var v'owner = sc_0~__tact_load_address();
    return (sc_0, (v'owner));
}

(slice, (int, int), int, int, int, int) $PoolMaster$_contract_load() impure inline_ref {
    slice $sc = get_data().begin_parse();
    __tact_context_sys = $sc~load_ref();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~$PoolMaster$_load();
    } else {
        ;; Allow only workchain deployments
        throw_unless(137, my_address().preload_uint(11) == 1024);
        (slice owner) = $sc~$PoolMaster$init$_load();
        $sc.end_parse();
        return $PoolMaster$_contract_init(owner);
    }
}

() $PoolMaster$_contract_store((slice, (int, int), int, int, int, int) v) impure inline {
    builder b = begin_cell();
    b = b.store_ref(__tact_context_sys);
    b = b.store_int(true, 1);
    b = $PoolMaster$_store(b, v);
    set_data(b.end_cell());
}

;;
;; Type: PoolAccount
;;

builder $PoolAccount$init$_store(builder build_0, (slice, slice, slice) v) inline {
    var (v'owner, v'master, v'prize_reserve) = v;
    build_0 = __tact_store_address(build_0, v'owner);
    build_0 = __tact_store_address(build_0, v'master);
    build_0 = __tact_store_address(build_0, v'prize_reserve);
    return build_0;
}

(cell, cell) $PoolAccount$_init_child(cell sys', slice $owner, slice $master, slice $prize_reserve) inline {
    slice sc' = sys'.begin_parse();
    cell source = sc'~load_dict();
    cell contracts = new_dict();
    
    ;; Contract Code: PoolAccount
    cell mine = __tact_dict_get_code(source, 23481);
    contracts = __tact_dict_set_code(contracts, 23481, mine);
    
    ;; Contract Code: Draw
    cell code_9326 = __tact_dict_get_code(source, 9326);
    contracts = __tact_dict_set_code(contracts, 9326, code_9326);
    
    ;; Contract Code: Ticket
    cell code_42189 = __tact_dict_get_code(source, 42189);
    contracts = __tact_dict_set_code(contracts, 42189, code_42189);
    
    ;; Build cell
    builder b = begin_cell();
    b = b.store_ref(begin_cell().store_dict(contracts).end_cell());
    b = b.store_int(false, 1);
    b = $PoolAccount$init$_store(b, ($owner, $master, $prize_reserve));
    return (mine, b.end_cell());
}

;;
;; Type: Draw
;;

builder $Draw$init$_store(builder build_0, (slice, slice, int) v) inline {
    var (v'pool_master, v'prize_reserve, v'period) = v;
    build_0 = __tact_store_address(build_0, v'pool_master);
    build_0 = __tact_store_address(build_0, v'prize_reserve);
    build_0 = build_0.store_int(v'period, 257);
    return build_0;
}

(cell, cell) $Draw$_init_child(cell sys', slice $pool_master, slice $prize_reserve, int $period) inline {
    slice sc' = sys'.begin_parse();
    cell source = sc'~load_dict();
    cell contracts = new_dict();
    
    ;; Contract Code: Draw
    cell mine = __tact_dict_get_code(source, 9326);
    contracts = __tact_dict_set_code(contracts, 9326, mine);
    
    ;; Contract Code: Ticket
    cell code_42189 = __tact_dict_get_code(source, 42189);
    contracts = __tact_dict_set_code(contracts, 42189, code_42189);
    
    ;; Build cell
    builder b = begin_cell();
    b = b.store_ref(begin_cell().store_dict(contracts).end_cell());
    b = b.store_int(false, 1);
    b = $Draw$init$_store(b, ($pool_master, $prize_reserve, $period));
    return (mine, b.end_cell());
}

;;
;; Type: PrizeReserve
;;

builder $PrizeReserve$init$_store(builder build_0, (slice) v) inline {
    var (v'pool_master) = v;
    build_0 = __tact_store_address(build_0, v'pool_master);
    return build_0;
}

(cell, cell) $PrizeReserve$_init_child(cell sys', slice $pool_master) inline {
    slice sc' = sys'.begin_parse();
    cell source = sc'~load_dict();
    cell contracts = new_dict();
    
    ;; Contract Code: PrizeReserve
    cell mine = __tact_dict_get_code(source, 46679);
    contracts = __tact_dict_set_code(contracts, 46679, mine);
    
    ;; Contract Code: PoolAccount
    cell code_23481 = __tact_dict_get_code(source, 23481);
    contracts = __tact_dict_set_code(contracts, 23481, code_23481);
    
    ;; Contract Code: Draw
    cell code_9326 = __tact_dict_get_code(source, 9326);
    contracts = __tact_dict_set_code(contracts, 9326, code_9326);
    
    ;; Contract Code: Ticket
    cell code_42189 = __tact_dict_get_code(source, 42189);
    contracts = __tact_dict_set_code(contracts, 42189, code_42189);
    
    ;; Build cell
    builder b = begin_cell();
    b = b.store_ref(begin_cell().store_dict(contracts).end_cell());
    b = b.store_int(false, 1);
    b = $PrizeReserve$init$_store(b, ($pool_master));
    return (mine, b.end_cell());
}