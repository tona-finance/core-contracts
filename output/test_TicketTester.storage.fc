;;
;; Type: StateInit
;; TLB: _ code:^cell data:^cell = StateInit
;;

((cell, cell)) $StateInit$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (cell vvv'code, cell vvv'data) = __tact_tuple_destroy_2(v);
    return (vvv'code, vvv'data);
}

;;
;; Type: SendParameters
;; TLB: _ bounce:bool to:address value:int257 mode:int257 body:Maybe ^cell code:Maybe ^cell data:Maybe ^cell = SendParameters
;;

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int bounce, slice to, int value, int mode, cell body, cell code, cell data) inline {
    return (bounce, to, value, mode, body, code, data);
}

;;
;; Type: Deploy
;; Header: 0x946a98b6
;; TLB: deploy#946a98b6 queryId:uint64 = Deploy
;;

(slice, ((int))) $Deploy$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2490013878);
    var v'queryId = sc_0~load_uint(64);
    return (sc_0, (v'queryId));
}

;;
;; Type: DeployOk
;; Header: 0xaff90f57
;; TLB: deploy_ok#aff90f57 queryId:uint64 = DeployOk
;;

builder $DeployOk$_store(builder build_0, (int) v) inline {
    var (v'queryId) = v;
    build_0 = store_uint(build_0, 2952335191, 32);
    build_0 = build_0.store_uint(v'queryId, 64);
    return build_0;
}

cell $DeployOk$_store_cell((int) v) inline {
    return $DeployOk$_store(begin_cell(), v).end_cell();
}

((int)) $DeployOk$_constructor_queryId(int queryId) inline {
    return (queryId);
}

;;
;; Type: WinningSplit
;; TLB: _ n0:uint8 n1:uint8 n2:uint8 n3:uint8 = WinningSplit
;;

builder $WinningSplit$_store(builder build_0, (int, int, int, int) v) inline {
    var (v'n0, v'n1, v'n2, v'n3) = v;
    build_0 = build_0.store_uint(v'n0, 8);
    build_0 = build_0.store_uint(v'n1, 8);
    build_0 = build_0.store_uint(v'n2, 8);
    build_0 = build_0.store_uint(v'n3, 8);
    return build_0;
}

(slice, ((int, int, int, int))) $WinningSplit$_load(slice sc_0) inline {
    var v'n0 = sc_0~load_uint(8);
    var v'n1 = sc_0~load_uint(8);
    var v'n2 = sc_0~load_uint(8);
    var v'n3 = sc_0~load_uint(8);
    return (sc_0, (v'n0, v'n1, v'n2, v'n3));
}

((int, int, int, int)) $WinningSplit$_constructor_n0_n1_n2_n3(int n0, int n1, int n2, int n3) inline {
    return (n0, n1, n2, n3);
}

;;
;; Type: ComputePickNumber
;; Header: 0x28b5ae3b
;; TLB: compute_pick_number#28b5ae3b index:uint32 expected_number:uint32 = ComputePickNumber
;;

(slice, ((int, int))) $ComputePickNumber$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 682995259);
    var v'index = sc_0~load_uint(32);
    var v'expected_number = sc_0~load_uint(32);
    return (sc_0, (v'index, v'expected_number));
}

;;
;; Type: ComputePrizeAmount
;; Header: 0x442d85b2
;; TLB: compute_prize_amount#442d85b2 expected_amount:coins index_payload:remainder<slice> = ComputePrizeAmount
;;

(slice, ((int, slice))) $ComputePrizeAmount$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 1143834034);
    var v'expected_amount = sc_0~load_coins();
    var v'index_payload = sc_0;
    return (sc_0, (v'expected_amount, v'index_payload));
}

;;
;; Type: TicketTester
;;

builder $TicketTester$_store(builder build_0, (slice, int, int, (int, int, int, int), cell) v) inline {
    var (v'owner, v'picks, v'prize_amount, (v'winning_split'n0, v'winning_split'n1, v'winning_split'n2, v'winning_split'n3), v'used_indexes) = v;
    build_0 = __tact_store_address(build_0, v'owner);
    build_0 = build_0.store_uint(v'picks, 32);
    build_0 = build_0.store_coins(v'prize_amount);
    build_0 = $WinningSplit$_store(build_0, (v'winning_split'n0, v'winning_split'n1, v'winning_split'n2, v'winning_split'n3));
    build_0 = build_0.store_dict(v'used_indexes);
    return build_0;
}

(slice, ((slice, int, int, (int, int, int, int), cell))) $TicketTester$_load(slice sc_0) inline {
    var v'owner = sc_0~__tact_load_address();
    var v'picks = sc_0~load_uint(32);
    var v'prize_amount = sc_0~load_coins();
    var v'winning_split = sc_0~$WinningSplit$_load();
    var v'used_indexes = sc_0~load_dict();
    return (sc_0, (v'owner, v'picks, v'prize_amount, v'winning_split, v'used_indexes));
}

(slice, ((slice, int, int))) $TicketTester$init$_load(slice sc_0) inline {
    var v'owner = sc_0~__tact_load_address();
    var v'picks = sc_0~load_int(257);
    var v'prize_amount = sc_0~load_int(257);
    return (sc_0, (v'owner, v'picks, v'prize_amount));
}

(slice, int, int, (int, int, int, int), cell) $TicketTester$_contract_load() impure inline_ref {
    slice $sc = get_data().begin_parse();
    __tact_context_sys = $sc~load_ref();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~$TicketTester$_load();
    } else {
        ;; Allow only workchain deployments
        throw_unless(137, my_address().preload_uint(11) == 1024);
        (slice owner, int picks, int prize_amount) = $sc~$TicketTester$init$_load();
        $sc.end_parse();
        return $TicketTester$_contract_init(owner, picks, prize_amount);
    }
}

() $TicketTester$_contract_store((slice, int, int, (int, int, int, int), cell) v) impure inline {
    builder b = begin_cell();
    b = b.store_ref(__tact_context_sys);
    b = b.store_int(true, 1);
    b = $TicketTester$_store(b, v);
    set_data(b.end_cell());
}