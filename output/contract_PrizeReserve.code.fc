#pragma version =0.4.3;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

#include "contract_PrizeReserve.headers.fc";
#include "contract_PrizeReserve.stdlib.fc";
#include "contract_PrizeReserve.storage.fc";

;;
;; Contract PrizeReserve functions
;;

(slice) $PrizeReserve$_contract_init(slice $pool_master) impure inline_ref {
    var (($self'pool_master)) = (null());
    $self'pool_master = $pool_master;
    return ($self'pool_master);
}

((slice), slice) $PrizeReserve$_fun__get_pool_account_address((slice) $self, slice $user) impure inline {
    var (($self'pool_master)) = $self;
    var ($sinit'code, $sinit'data) = $PoolAccount$_init_child(__tact_context_sys, $user, $self'pool_master, my_address());
    return (($self'pool_master), $global_contractAddress(($sinit'code, $sinit'data)));
}

((slice), (cell, cell)) $PrizeReserve$_fun__get_ticket_init((slice) $self, slice $user, slice $draw, int $period) impure inline {
    var (($self'pool_master)) = $self;
    slice $pool_account = ($self'pool_master)~$PrizeReserve$_fun__get_pool_account_address($user);
    return (($self'pool_master), $Ticket$_init_child(__tact_context_sys, $user, $pool_account, $draw, $period));
}

((slice), (slice, int)) $PrizeReserve$_fun_get_core_data((slice) $self) impure inline {
    var (($self'pool_master)) = $self;
    return (($self'pool_master), $PrizeReserveData$_constructor_pool_master_balance($self'pool_master, (__tact_my_balance() - 10000000)));
}

((slice), slice) $PrizeReserve$_fun__get_ticket_address((slice) $self, slice $user, slice $draw, int $period) impure inline {
    var (($self'pool_master)) = $self;
    var ($sinit'code, $sinit'data) = ($self'pool_master)~$PrizeReserve$_fun__get_ticket_init($user, $draw, $period);
    return (($self'pool_master), $global_contractAddress(($sinit'code, $sinit'data)));
}

((slice), ()) $PrizeReserve$_fun_require_ticket((slice) $self, slice $user, slice $draw, int $period) impure inline {
    var (($self'pool_master)) = $self;
    throw_unless(4429, ( __tact_slice_eq_bits(($self'pool_master)~$PrizeReserve$_fun__get_ticket_address($user, $draw, $period), __tact_context_get_sender()) ));
    return (($self'pool_master), ());
}

;;
;; Receivers of a Contract PrizeReserve
;;

(((slice)), ()) %$PrizeReserve$_internal_empty((slice) $self) impure inline {
    var ($self'pool_master) = $self;
    return (($self'pool_master), ());
}

(((slice)), ()) $PrizeReserve$_internal_binary_ClaimPrizeDebtInternal((slice) $self, (int, slice, slice, int) $msg) impure inline {
    var ($self'pool_master) = $self;
    var ($msg'amount, $msg'user, $msg'draw, $msg'period) = $msg;
    ($self'pool_master)~$PrizeReserve$_fun_require_ticket($msg'user, $msg'draw, $msg'period);
    var ($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw) = __tact_context_get();
    int $fee = ($Context$_fun_readForwardFee(($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw)) + 10000000);
    raw_reserve((((__tact_my_balance() - 10000000) - $fee) - $msg'amount), 0);
    $global_send($SendParameters$_constructor_bounce_to_value_mode(false, $msg'user, $msg'amount, 128));
    return (($self'pool_master), ());
}

(((slice)), ()) $PrizeReserve$_internal_binary_Deploy((slice) $self, (int) $deploy) impure inline {
    var ($self'pool_master) = $self;
    var ($deploy'queryId) = $deploy;
    ($self'pool_master)~$PrizeReserve$_fun_notify($DeployOk$_store_cell($DeployOk$_constructor_queryId($deploy'queryId)));
    return (($self'pool_master), ());
}

;;
;; Get methods of a Contract PrizeReserve
;;

_ %get_core_data() method_id(119856) {
    var self = $PrizeReserve$_contract_load();
    var res = self~$PrizeReserve$_fun_get_core_data();
    return $PrizeReserveData$_to_external(res);
}

_ supported_interfaces() method_id {
    return (
        "org.ton.introspection.v0"H >> 128,
        "org.ton.abi.ipfs.v0"H >> 128,
        "org.ton.deploy.lazy.v0"H >> 128,
        "org.ton.debug.v0"H >> 128,
        "org.ton.chain.workchain.v0"H >> 128
    );
}

_ get_abi_ipfs() method_id {
    return "ipfs://QmWkAK6459W4X6dGSYvmR7k2oq5Mo11dB4U26NMQe7AbfM";
}

_ lazy_deployment_completed() method_id {
    return get_data().begin_parse().load_int(1);
}

;;
;; Routing of a Contract PrizeReserve
;;

((slice), int) $PrizeReserve$_contract_router_internal((slice) self, int msg_bounced, slice in_msg) impure inline_ref {
    ;; Handle bounced messages
    if (msg_bounced) {
        return (self, true);
    }
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    
    ;; Receive empty message
    if ((op == 0) & (slice_bits(in_msg) <= 32)) {
        self~%$PrizeReserve$_internal_empty();
        return (self, true);
    }
    
    ;; Receive ClaimPrizeDebtInternal message
    if (op == 1036077356) {
        var msg = in_msg~$ClaimPrizeDebtInternal$_load();
        self~$PrizeReserve$_internal_binary_ClaimPrizeDebtInternal(msg);
        return (self, true);
    }
    
    ;; Receive Deploy message
    if (op == 2490013878) {
        var msg = in_msg~$Deploy$_load();
        self~$PrizeReserve$_internal_binary_Deploy(msg);
        return (self, true);
    }
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = -(msg_flags & 1);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = $PrizeReserve$_contract_load();
    
    ;; Handle operation
    int handled = self~$PrizeReserve$_contract_router_internal(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(130, handled);
    
    ;; Persist state
    $PrizeReserve$_contract_store(self);
}
