;;
;; Type: StateInit
;; TLB: _ code:^cell data:^cell = StateInit
;;

((cell, cell)) $StateInit$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (cell vvv'code, cell vvv'data) = __tact_tuple_destroy_2(v);
    return (vvv'code, vvv'data);
}

tuple $StateInit$_as_optional((cell, cell) v) inline {
    var (v'code, v'data) = v;
    return __tact_tuple_create_2(v'code, v'data);
}

;;
;; Type: SendParameters
;; TLB: _ bounce:bool to:address value:int257 mode:int257 body:Maybe ^cell code:Maybe ^cell data:Maybe ^cell = SendParameters
;;

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int bounce, slice to, int value, int mode, cell body, cell code, cell data) inline {
    return (bounce, to, value, mode, body, code, data);
}

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body(int bounce, slice to, int value, int mode, cell body) inline {
    return (bounce, to, value, mode, body, null(), null());
}

;;
;; Type: Deploy
;; Header: 0x946a98b6
;; TLB: deploy#946a98b6 queryId:uint64 = Deploy
;;

(slice, ((int))) $Deploy$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2490013878);
    var v'queryId = sc_0~load_uint(64);
    return (sc_0, (v'queryId));
}

;;
;; Type: DeployOk
;; Header: 0xaff90f57
;; TLB: deploy_ok#aff90f57 queryId:uint64 = DeployOk
;;

builder $DeployOk$_store(builder build_0, (int) v) inline {
    var (v'queryId) = v;
    build_0 = store_uint(build_0, 2952335191, 32);
    build_0 = build_0.store_uint(v'queryId, 64);
    return build_0;
}

cell $DeployOk$_store_cell((int) v) inline {
    return $DeployOk$_store(begin_cell(), v).end_cell();
}

((int)) $DeployOk$_constructor_queryId(int queryId) inline {
    return (queryId);
}

;;
;; Type: Twab
;; TLB: _ timestamp:uint64 amount:uint128 = Twab
;;

builder $Twab$_store(builder build_0, (int, int) v) inline {
    var (v'timestamp, v'amount) = v;
    build_0 = build_0.store_uint(v'timestamp, 64);
    build_0 = build_0.store_uint(v'amount, 128);
    return build_0;
}

cell $Twab$_store_cell((int, int) v) inline {
    return $Twab$_store(begin_cell(), v).end_cell();
}

(slice, ((int, int))) $Twab$_load(slice sc_0) inline {
    var v'timestamp = sc_0~load_uint(64);
    var v'amount = sc_0~load_uint(128);
    return (sc_0, (v'timestamp, v'amount));
}

tuple $Twab$_as_optional((int, int) v) inline {
    var (v'timestamp, v'amount) = v;
    return __tact_tuple_create_2(v'timestamp, v'amount);
}

tuple $Twab$_load_opt(cell cl) inline {
    if (null?(cl)) {
        return null();
    }
    var sc = cl.begin_parse();
    return $Twab$_as_optional(sc~$Twab$_load());
}

((int, int)) $Twab$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (int vvv'timestamp, int vvv'amount) = __tact_tuple_destroy_2(v);
    return (vvv'timestamp, vvv'amount);
}

(int, int) $Twab$_to_external(((int, int)) v) inline {
    var (v'timestamp, v'amount) = v; 
    return (v'timestamp, v'amount);
}

((int, int)) $Twab$_constructor_timestamp_amount(int timestamp, int amount) inline {
    return (timestamp, amount);
}

;;
;; Type: TwabStore
;; TLB: _ store:dict<int, ^Twab{timestamp:uint64,amount:uint128}> size:uint64 = TwabStore
;;

builder $TwabStore$_store(builder build_0, (cell, int) v) inline {
    var (v'store, v'size) = v;
    build_0 = build_0.store_dict(v'store);
    build_0 = build_0.store_uint(v'size, 64);
    return build_0;
}

(slice, ((cell, int))) $TwabStore$_load(slice sc_0) inline {
    var v'store = sc_0~load_dict();
    var v'size = sc_0~load_uint(64);
    return (sc_0, (v'store, v'size));
}

((cell, int)) $TwabStore$_constructor_store_size(cell store, int size) inline {
    return (store, size);
}

;;
;; Type: DepositInternal
;; Header: 0xa152ad13
;; TLB: deposit_internal#a152ad13 amount:coins user:address = DepositInternal
;;

builder $DepositInternal$_store(builder build_0, (int, slice) v) inline {
    var (v'amount, v'user) = v;
    build_0 = store_uint(build_0, 2706550035, 32);
    build_0 = build_0.store_coins(v'amount);
    build_0 = __tact_store_address(build_0, v'user);
    return build_0;
}

cell $DepositInternal$_store_cell((int, slice) v) inline {
    return $DepositInternal$_store(begin_cell(), v).end_cell();
}

(slice, ((int))) $DepositInternal$_load_bounced(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2706550035);
    var v'amount = sc_0~load_coins();
    return (sc_0, (v'amount));
}

((int, slice)) $DepositInternal$_constructor_amount_user(int amount, slice user) inline {
    return (amount, user);
}

;;
;; Type: WithdrawInternal
;; Header: 0xff1a77b3
;; TLB: withdraw_internal#ff1a77b3 amount:coins user:address = WithdrawInternal
;;

builder $WithdrawInternal$_store(builder build_0, (int, slice) v) inline {
    var (v'amount, v'user) = v;
    build_0 = store_uint(build_0, 4279924659, 32);
    build_0 = build_0.store_coins(v'amount);
    build_0 = __tact_store_address(build_0, v'user);
    return build_0;
}

cell $WithdrawInternal$_store_cell((int, slice) v) inline {
    return $WithdrawInternal$_store(begin_cell(), v).end_cell();
}

(slice, ((int))) $WithdrawInternal$_load_bounced(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 4279924659);
    var v'amount = sc_0~load_coins();
    return (sc_0, (v'amount));
}

((int, slice)) $WithdrawInternal$_constructor_amount_user(int amount, slice user) inline {
    return (amount, user);
}

;;
;; Type: Withdraw
;; Header: 0x0ba69751
;; TLB: withdraw#0ba69751 amount:coins = Withdraw
;;

(slice, ((int))) $Withdraw$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 195467089);
    var v'amount = sc_0~load_coins();
    return (sc_0, (v'amount));
}

;;
;; Type: DepositFinish
;; Header: 0xcff32eaa
;; TLB: deposit_finish#cff32eaa timestamp:uint64 amount:coins = DepositFinish
;;

(slice, ((int, int))) $DepositFinish$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 3488820906);
    var v'timestamp = sc_0~load_uint(64);
    var v'amount = sc_0~load_coins();
    return (sc_0, (v'timestamp, v'amount));
}

;;
;; Type: WithdrawFinish
;; Header: 0x1440585b
;; TLB: withdraw_finish#1440585b timestamp:uint64 amount:coins = WithdrawFinish
;;

(slice, ((int, int))) $WithdrawFinish$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 339761243);
    var v'timestamp = sc_0~load_uint(64);
    var v'amount = sc_0~load_coins();
    return (sc_0, (v'timestamp, v'amount));
}

;;
;; Type: PrepareInitTicket
;; Header: 0xfd2a75d9
;; TLB: prepare_init_ticket#fd2a75d9 period:uint32 start:uint64 end:uint64 avg_balance:coins = PrepareInitTicket
;;

(slice, ((int, int, int, int))) $PrepareInitTicket$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 4247418329);
    var v'period = sc_0~load_uint(32);
    var v'start = sc_0~load_uint(64);
    var v'end = sc_0~load_uint(64);
    var v'avg_balance = sc_0~load_coins();
    return (sc_0, (v'period, v'start, v'end, v'avg_balance));
}

;;
;; Type: InitTicketInternal
;; Header: 0xb10fd50e
;; TLB: init_ticket_internal#b10fd50e draw_avg_balance:coins user_avg_balance:coins = InitTicketInternal
;;

builder $InitTicketInternal$_store(builder build_0, (int, int) v) inline {
    var (v'draw_avg_balance, v'user_avg_balance) = v;
    build_0 = store_uint(build_0, 2970604814, 32);
    build_0 = build_0.store_coins(v'draw_avg_balance);
    build_0 = build_0.store_coins(v'user_avg_balance);
    return build_0;
}

cell $InitTicketInternal$_store_cell((int, int) v) inline {
    return $InitTicketInternal$_store(begin_cell(), v).end_cell();
}

((int, int)) $InitTicketInternal$_constructor_draw_avg_balance_user_avg_balance(int draw_avg_balance, int user_avg_balance) inline {
    return (draw_avg_balance, user_avg_balance);
}

;;
;; Type: PoolAccountData
;; TLB: _ owner:address master:address prize_reserve:address share_amount:coins = PoolAccountData
;;

(slice, slice, slice, int) $PoolAccountData$_to_external(((slice, slice, slice, int)) v) inline {
    var (v'owner, v'master, v'prize_reserve, v'share_amount) = v; 
    return (v'owner, v'master, v'prize_reserve, v'share_amount);
}

((slice, slice, slice, int)) $PoolAccountData$_constructor_owner_master_prize_reserve_share_amount(slice owner, slice master, slice prize_reserve, int share_amount) inline {
    return (owner, master, prize_reserve, share_amount);
}

;;
;; Type: PoolAccount
;;

builder $PoolAccount$_store(builder build_0, (slice, slice, (cell, int), int, int, slice) v) inline {
    var (v'owner, v'master, (v'twab_store'store, v'twab_store'size), v'share_amount, v'lock, v'prize_reserve) = v;
    build_0 = __tact_store_address(build_0, v'owner);
    build_0 = __tact_store_address(build_0, v'master);
    build_0 = $TwabStore$_store(build_0, (v'twab_store'store, v'twab_store'size));
    build_0 = build_0.store_coins(v'share_amount);
    build_0 = build_0.store_int(v'lock, 1);
    build_0 = __tact_store_address(build_0, v'prize_reserve);
    return build_0;
}

(slice, ((slice, slice, (cell, int), int, int, slice))) $PoolAccount$_load(slice sc_0) inline {
    var v'owner = sc_0~__tact_load_address();
    var v'master = sc_0~__tact_load_address();
    var v'twab_store = sc_0~$TwabStore$_load();
    var v'share_amount = sc_0~load_coins();
    var v'lock = sc_0~load_int(1);
    var v'prize_reserve = sc_0~__tact_load_address();
    return (sc_0, (v'owner, v'master, v'twab_store, v'share_amount, v'lock, v'prize_reserve));
}

(slice, ((slice, slice, slice))) $PoolAccount$init$_load(slice sc_0) inline {
    var v'owner = sc_0~__tact_load_address();
    var v'master = sc_0~__tact_load_address();
    var v'prize_reserve = sc_0~__tact_load_address();
    return (sc_0, (v'owner, v'master, v'prize_reserve));
}

(slice, slice, (cell, int), int, int, slice) $PoolAccount$_contract_load() impure inline_ref {
    slice $sc = get_data().begin_parse();
    __tact_context_sys = $sc~load_ref();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~$PoolAccount$_load();
    } else {
        ;; Allow only workchain deployments
        throw_unless(137, my_address().preload_uint(11) == 1024);
        (slice owner, slice master, slice prize_reserve) = $sc~$PoolAccount$init$_load();
        $sc.end_parse();
        return $PoolAccount$_contract_init(owner, master, prize_reserve);
    }
}

() $PoolAccount$_contract_store((slice, slice, (cell, int), int, int, slice) v) impure inline {
    builder b = begin_cell();
    b = b.store_ref(__tact_context_sys);
    b = b.store_int(true, 1);
    b = $PoolAccount$_store(b, v);
    set_data(b.end_cell());
}

;;
;; Type: Draw
;;

builder $Draw$init$_store(builder build_0, (slice, slice, int) v) inline {
    var (v'pool_master, v'prize_reserve, v'period) = v;
    build_0 = __tact_store_address(build_0, v'pool_master);
    build_0 = __tact_store_address(build_0, v'prize_reserve);
    build_0 = build_0.store_int(v'period, 257);
    return build_0;
}

(cell, cell) $Draw$_init_child(cell sys', slice $pool_master, slice $prize_reserve, int $period) inline {
    slice sc' = sys'.begin_parse();
    cell source = sc'~load_dict();
    cell contracts = new_dict();
    
    ;; Contract Code: Draw
    cell mine = __tact_dict_get_code(source, 9326);
    contracts = __tact_dict_set_code(contracts, 9326, mine);
    
    ;; Contract Code: Ticket
    cell code_42189 = __tact_dict_get_code(source, 42189);
    contracts = __tact_dict_set_code(contracts, 42189, code_42189);
    
    ;; Build cell
    builder b = begin_cell();
    b = b.store_ref(begin_cell().store_dict(contracts).end_cell());
    b = b.store_int(false, 1);
    b = $Draw$init$_store(b, ($pool_master, $prize_reserve, $period));
    return (mine, b.end_cell());
}

;;
;; Type: Ticket
;;

builder $Ticket$init$_store(builder build_0, (slice, slice, slice, int) v) inline {
    var (v'owner, v'pool_account, v'draw, v'period) = v;
    build_0 = __tact_store_address(build_0, v'owner);
    build_0 = __tact_store_address(build_0, v'pool_account);
    build_0 = __tact_store_address(build_0, v'draw);
    var build_1 = begin_cell();
    build_1 = build_1.store_int(v'period, 257);
    build_0 = store_ref(build_0, build_1.end_cell());
    return build_0;
}

(cell, cell) $Ticket$_init_child(cell sys', slice $owner, slice $pool_account, slice $draw, int $period) inline {
    slice sc' = sys'.begin_parse();
    cell source = sc'~load_dict();
    cell contracts = new_dict();
    
    ;; Contract Code: Ticket
    cell mine = __tact_dict_get_code(source, 42189);
    contracts = __tact_dict_set_code(contracts, 42189, mine);
    
    ;; Build cell
    builder b = begin_cell();
    b = b.store_ref(begin_cell().store_dict(contracts).end_cell());
    b = b.store_int(false, 1);
    b = $Ticket$init$_store(b, ($owner, $pool_account, $draw, $period));
    return (mine, b.end_cell());
}