;;
;; Header files for Ticket
;; NOTE: declarations are sorted for optimal order
;;

;; __tact_verify_address
slice __tact_verify_address(slice address) inline;

;; __tact_load_address
(slice, slice) __tact_load_address(slice cs) inline;

;; __tact_store_address
builder __tact_store_address(builder b, slice address) inline;

;; __tact_my_balance
int __tact_my_balance() inline;

;; __tact_not_null
forall X -> X __tact_not_null(X x) inline;

;; __tact_context_get
(int, slice, int, slice) __tact_context_get() inline;

;; __tact_context_get_sender
slice __tact_context_get_sender() inline;

;; __tact_store_bool
builder __tact_store_bool(builder b, int v) inline;

;; __tact_dict_set_int_int
(cell, ()) __tact_dict_set_int_int(cell d, int kl, int k, int v, int vl) inline;

;; __tact_dict_get_int_int
int __tact_dict_get_int_int(cell d, int kl, int k, int vl) inline;

;; __tact_slice_eq_bits
int __tact_slice_eq_bits(slice a, slice b) inline;

;; $WinningSplit$_store
builder $WinningSplit$_store(builder build_0, (int, int, int, int) v) inline;

;; $WinningSplit$_load
(slice, ((int, int, int, int))) $WinningSplit$_load(slice sc_0) inline;

;; $ClaimPrizeInternal$_store
builder $ClaimPrizeInternal$_store(builder build_0, (slice, slice, int) v) inline;

;; $ClaimPrizeInternal$_store_cell
cell $ClaimPrizeInternal$_store_cell((slice, slice, int) v) inline;

;; $InitTicketInternal$_load
(slice, ((int, int, int))) $InitTicketInternal$_load(slice sc_0) inline;

;; $ClaimPrize$_load
(slice, ((cell))) $ClaimPrize$_load(slice sc_0) inline;

;; $Ticket$_store
builder $Ticket$_store(builder build_0, (slice, int, slice, slice, int, (int, int, int, int), int, cell) v) inline;

;; $Ticket$_load
(slice, ((slice, int, slice, slice, int, (int, int, int, int), int, cell))) $Ticket$_load(slice sc_0) inline;

;; $StateInit$_not_null
((cell, cell)) $StateInit$_not_null(tuple v) inline;

;; $TicketData$_to_external
(int, slice, slice, slice, int, int) $TicketData$_to_external(((int, slice, slice, slice, int, int)) v) inline;

;; $Ticket$init$_load
(slice, ((slice, slice, slice, int))) $Ticket$init$_load(slice sc_0) inline;

;; $WinningSplit$_constructor_n0_n1_n2_n3
((int, int, int, int)) $WinningSplit$_constructor_n0_n1_n2_n3(int n0, int n1, int n2, int n3) inline;

;; $global_empty_winning_split
(int, int, int, int) $global_empty_winning_split() impure inline;

;; $Ticket$_contract_init
(slice, int, slice, slice, int, (int, int, int, int), int, cell) $Ticket$_contract_init(slice $owner, slice $pool_account, slice $draw, int $period) impure inline_ref;

;; $Ticket$_contract_load
(slice, int, slice, slice, int, (int, int, int, int), int, cell) $Ticket$_contract_load() impure inline_ref;

;; $Ticket$_contract_store
() $Ticket$_contract_store((slice, int, slice, slice, int, (int, int, int, int), int, cell) v) impure inline;

;; $global_send
() $global_send((int, slice, int, int, cell, cell, cell) $params) impure inline;

;; $WinningSplit$_fun_apply
((int, int, int, int), ()) $WinningSplit$_fun_apply((int, int, int, int) $self, int $winning_number) impure inline;

;; $WinningSplit$_fun_compute_prize_scale
int $WinningSplit$_fun_compute_prize_scale((int, int, int, int) $self, int $pick_number) impure inline;

;; $SendParameters$_constructor_bounce_to_value_mode_body_code_data
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int bounce, slice to, int value, int mode, cell body, cell code, cell data) inline;

;; $TicketData$_constructor_active_owner_pool_account_draw_period_picks
((int, slice, slice, slice, int, int)) $TicketData$_constructor_active_owner_pool_account_draw_period_picks(int active, slice owner, slice pool_account, slice draw, int period, int picks) inline;

;; $Ticket$_fun_get_core_data
((slice, int, slice, slice, int, (int, int, int, int), int, cell), (int, slice, slice, slice, int, int)) $Ticket$_fun_get_core_data((slice, int, slice, slice, int, (int, int, int, int), int, cell) $self) impure inline;

;; $Ticket$_fun_get_index_status
((slice, int, slice, slice, int, (int, int, int, int), int, cell), int) $Ticket$_fun_get_index_status((slice, int, slice, slice, int, (int, int, int, int), int, cell) $self, int $index) impure inline;

;; $Ticket$_fun_forward
((slice, int, slice, slice, int, (int, int, int, int), int, cell), ()) $Ticket$_fun_forward((slice, int, slice, slice, int, (int, int, int, int), int, cell) $self, slice $to, cell $body, int $bounce, tuple $init) impure inline;

;; $Ticket$_fun_compute_pick_number
((slice, int, slice, slice, int, (int, int, int, int), int, cell), int) $Ticket$_fun_compute_pick_number((slice, int, slice, slice, int, (int, int, int, int), int, cell) $self, int $index) impure inline;

;; $Ticket$_fun_compute_prize_scale
((slice, int, slice, slice, int, (int, int, int, int), int, cell), int) $Ticket$_fun_compute_prize_scale((slice, int, slice, slice, int, (int, int, int, int), int, cell) $self, slice $index_payload) impure inline;

;; $Ticket$_fun_require_pool_account
((slice, int, slice, slice, int, (int, int, int, int), int, cell), ()) $Ticket$_fun_require_pool_account((slice, int, slice, slice, int, (int, int, int, int), int, cell) $self) impure inline;

;; $Ticket$_fun_require_active
((slice, int, slice, slice, int, (int, int, int, int), int, cell), ()) $Ticket$_fun_require_active((slice, int, slice, slice, int, (int, int, int, int), int, cell) $self) impure inline;

;; $Ticket$_fun_require_inactive
((slice, int, slice, slice, int, (int, int, int, int), int, cell), ()) $Ticket$_fun_require_inactive((slice, int, slice, slice, int, (int, int, int, int), int, cell) $self) impure inline;

;; $Ticket$_fun_requireOwner
((slice, int, slice, slice, int, (int, int, int, int), int, cell), ()) $Ticket$_fun_requireOwner((slice, int, slice, slice, int, (int, int, int, int), int, cell) $self) impure inline;

;; $Ticket$_fun_owner
((slice, int, slice, slice, int, (int, int, int, int), int, cell), slice) $Ticket$_fun_owner((slice, int, slice, slice, int, (int, int, int, int), int, cell) $self) impure inline;

;; $Ticket$_fun_msg_value
((slice, int, slice, slice, int, (int, int, int, int), int, cell), int) $Ticket$_fun_msg_value((slice, int, slice, slice, int, (int, int, int, int), int, cell) $self, (int, slice, int, slice) $ctx, int $gas_consumption) impure inline;

;; $ClaimPrizeInternal$_constructor_user_pool_account_prize_scale
((slice, slice, int)) $ClaimPrizeInternal$_constructor_user_pool_account_prize_scale(slice user, slice pool_account, int prize_scale) inline;
